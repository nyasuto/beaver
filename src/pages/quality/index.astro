---
/**
 * Code Quality Analysis Dashboard Page
 *
 * This page displays code quality metrics from Codecov API including:
 * - Overall coverage metrics
 * - Module-level coverage analysis
 * - Top 5 modules requiring attention
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import ModuleCoverageChart from '../../components/charts/ModuleCoverageChart.tsx';
import CoverageHistoryChart from '../../components/charts/CoverageHistoryChart.tsx';
import QualityDashboardWithSettings from '../../components/quality/QualityDashboardWithSettings.tsx';
import { getQualityMetrics } from '../../lib/quality/codecov';

const title = '品質分析ダッシュボード';
const description = 'Codecov APIを使用してコードカバレッジの品質分析を表示';

// Codecovからの品質メトリクスを取得
let qualityData = null;
let isDataAvailable = false;
let errorMessage = null;

try {
  qualityData = await getQualityMetrics();
  isDataAvailable = true;
} catch (error) {
  console.error('品質データの取得に失敗しました:', error);
  errorMessage = error instanceof Error ? error.message : '不明なエラーが発生しました';

  // フォールバック用のサンプルデータ
  qualityData = {
    overallCoverage: 75.5,
    totalLines: 12456,
    coveredLines: 9404,
    missedLines: 3052,
    branchCoverage: 68.3,
    lineCoverage: 75.5,
    complexity: 'Medium',
    lastUpdated: new Date().toISOString(),
    modules: [
      { name: 'src/lib/github', coverage: 45.2, lines: 892, missedLines: 489 },
      { name: 'src/components/ui', coverage: 32.8, lines: 1245, missedLines: 836 },
      { name: 'src/lib/analytics', coverage: 58.9, lines: 678, missedLines: 278 },
      { name: 'src/pages/api', coverage: 42.1, lines: 534, missedLines: 309 },
      { name: 'src/lib/utils', coverage: 89.4, lines: 423, missedLines: 45 },
      { name: 'src/components/charts', coverage: 67.2, lines: 789, missedLines: 259 },
      { name: 'src/lib/data', coverage: 78.6, lines: 345, missedLines: 74 },
    ],
    history: [
      { date: '2025-01-03', coverage: 73.2 },
      { date: '2025-01-04', coverage: 74.1 },
      { date: '2025-01-05', coverage: 73.8 },
      { date: '2025-01-06', coverage: 75.2 },
      { date: '2025-01-07', coverage: 74.9 },
      { date: '2025-01-08', coverage: 75.1 },
      { date: '2025-01-09', coverage: 75.5 },
    ],
  };
}

// 設定可能な閾値による品質分析
const DEFAULT_ATTENTION_THRESHOLD = 80; // デフォルト閾値を80%に設定
const DEFAULT_DISPLAY_COUNT = 5;

// モジュール別カバレッジチャート用データの準備
const moduleCoverageData = qualityData.modules.map(module => ({
  name: module.name,
  coverage: module.coverage,
  lines: module.lines,
  missedLines: module.missedLines,
}));

// 履歴チャート用データの準備（実データのみ使用）
const coverageHistoryData = qualityData.history.map(entry => ({
  date: entry.date,
  coverage: entry.coverage,
  // Only add branch coverage if we have actual data, don't fabricate it
}));
---

<PageLayout
  title={title}
  description={description}
  showHeader={true}
  showFooter={true}
  showSearch={false}
  maxWidth="7xl"
  padding="lg"
  class="page-background"
>
  <div class="space-y-8">
    <PageHeader
      title="品質分析ダッシュボード"
      description="Codecov APIを使用したコードカバレッジとモジュール品質の分析"
      icon="🔍"
      metaInfo={{
        dataSource: `${qualityData.modules.length} modules analyzed`,
        lastUpdated: new Date(qualityData.lastUpdated),
        isDataAvailable: isDataAvailable,
      }}
      warningMessage={errorMessage
        ? `データ取得エラー: ${errorMessage} - サンプルデータを表示中`
        : !isDataAvailable
          ? 'サンプルデータを使用中 - 実際の分析にはCodecov APIの設定が必要です'
          : undefined}
    />

    <!-- Key Quality Metrics -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">総合カバレッジ</p>
            <p class="text-2xl font-bold text-heading">{qualityData.overallCoverage.toFixed(1)}%</p>
          </div>
          <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
            <span class="text-blue-600 text-xl">📊</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">総行数</p>
            <p class="text-2xl font-bold text-heading">{qualityData.totalLines.toLocaleString()}</p>
          </div>
          <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
            <span class="text-green-600 text-xl">📝</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">カバー済み行数</p>
            <p class="text-2xl font-bold text-heading">
              {qualityData.coveredLines.toLocaleString()}
            </p>
          </div>
          <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
            <span class="text-purple-600 text-xl">✅</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">未カバー行数</p>
            <p class="text-2xl font-bold text-heading">
              {qualityData.missedLines.toLocaleString()}
            </p>
          </div>
          <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
            <span class="text-red-600 text-xl">❌</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Coverage History Chart (Full Width) -->
    <div class="mb-8">
      {
        coverageHistoryData.length === 0 ? (
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
            <div class="text-yellow-600 mb-2">
              <svg
                class="w-12 h-12 mx-auto mb-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-yellow-800 mb-2">履歴データなし</h3>
            <p class="text-yellow-700">
              Codecov APIから履歴データを取得できませんでした。
              <br />
              データが蓄積されるとここにカバレッジの推移が表示されます。
            </p>
          </div>
        ) : (
          <CoverageHistoryChart
            data={coverageHistoryData}
            title="カバレッジ履歴チャート"
            description="時系列でのカバレッジ変化を可視化"
            height={400}
            showMultipleMetrics={true}
            showTrend={true}
            goalPercentage={80}
            defaultPeriod="1m"
            loading={false}
            error={errorMessage || undefined}
            client:load
          />
        )
      }
    </div>

    <!-- Module Coverage Analysis -->
    <div class="mb-8">
      <ModuleCoverageChart
        data={moduleCoverageData}
        title="モジュール別カバレッジ分析"
        description={`閾値${DEFAULT_ATTENTION_THRESHOLD}%でのカバレッジ状況（低い順に表示）`}
        height={400}
        showPercentage={true}
        showValues={true}
        threshold={DEFAULT_ATTENTION_THRESHOLD}
        maxModules={10}
        sortOrder="asc"
        loading={false}
        error={errorMessage || undefined}
        client:load
      />
    </div>

    <!-- Interactive Quality Dashboard with Settings -->
    <QualityDashboardWithSettings
      modules={moduleCoverageData}
      defaultThreshold={DEFAULT_ATTENTION_THRESHOLD}
      defaultDisplayCount={DEFAULT_DISPLAY_COUNT}
      client:load
    />

    <!-- API Status -->
    <div class="card">
      <h2 class="text-lg font-semibold text-heading mb-4">🔗 API接続状況</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <h3 class="font-medium text-heading mb-2">データソース</h3>
          <p class="text-sm text-muted">
            {isDataAvailable ? 'Codecov API (実際のデータ)' : 'サンプルデータ'}
          </p>
          <p class="text-xs text-muted mt-1">
            最終更新: {new Date(qualityData.lastUpdated).toLocaleString('ja-JP')}
          </p>
        </div>
        <div>
          <h3 class="font-medium text-heading mb-2">API設定</h3>
          <p class="text-sm text-muted">
            {isDataAvailable ? '✅ 接続正常' : '⚠️ 設定が必要'}
          </p>
          {
            !isDataAvailable && (
              <p class="text-xs text-muted mt-1">環境変数 CODECOV_TOKEN の設定が必要です</p>
            )
          }
        </div>
      </div>
    </div>
  </div>
</PageLayout>
