---
/**
 * Analytics Dashboard Page
 *
 * This page displays analytics and insights about GitHub repository activity.
 * Integrates with Analytics Engine and GitHub data for real-time insights.
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import {
  IssueTrendsChart,
  IssueCategoriesChart,
  ResolutionTimeChart,
  ContributorActivityChart,
} from '../../components/charts/AnalyticsCharts.tsx';

import { getIssuesWithFallback, hasStaticData, getStaticMetadata } from '../../lib/data/github';
import {
  calculateMetrics,
  convertIssuesTrendData,
  convertCategoriesData,
  convertResolutionTimeData,
  convertContributorData,
  generateRecentActivity,
  formatTimeAgo,
} from '../../lib/analytics/data-adapter';
import type { Issue } from '../../lib/schemas/github';
import { resolveUrl } from '../../lib/utils/url';

const title = 'Analytics Dashboard';
const description = 'View analytics and insights about your GitHub repository activity';

const breadcrumbs = [
  { name: 'Home', href: resolveUrl('/') },
  { name: 'Analytics', href: resolveUrl('/analytics') },
];

// ÈùôÁöÑ„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
const issues = getIssuesWithFallback();
const isDataAvailable = hasStaticData();

// „É°„Éà„É™„ÇØ„Çπ„ÅÆË®àÁÆó
const metrics = calculateMetrics(issues);

// „ÉÅ„É£„Éº„ÉàÁî®„Éá„Éº„Çø„ÅÆÊ∫ñÂÇô
const issuesTrendData = convertIssuesTrendData(
  issues.slice(-30).map((issue: Issue, index: number) => ({
    timestamp: new Date(issue.created_at),
    value: index + 1,
  }))
);

const categoriesData = convertCategoriesData(issues);
const resolutionTimeData = convertResolutionTimeData(
  {
    averageResolutionTime: 0,
    medianResolutionTime: 0,
    resolutionRate: 0,
    responseTime: 0,
    throughput: 0,
    backlogSize: 0,
    burndownRate: 0,
  },
  issues
);
const contributorData = convertContributorData(issues);

// ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£
const recentActivity = generateRecentActivity(issues);

// „É°„Çø„Éá„Éº„Çø
let metadata = null;
try {
  if (isDataAvailable) {
    metadata = getStaticMetadata();
  }
} catch (error) {
  // eslint-disable-next-line no-console
  console.error('„É°„Çø„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
}
---

<PageLayout
  title={title}
  description={description}
  breadcrumbs={breadcrumbs}
  showHeader={true}
  showFooter={true}
  showSearch={true}
  maxWidth="7xl"
  padding="lg"
  class="page-background"
>
  <div class="space-y-8">
    <PageHeader
      title="Analytics Dashboard"
      description="Insights and analytics about your GitHub repository activity"
      icon="üìä"
      metaInfo={{
        repositoryOwner: metadata?.repository?.owner,
        repositoryName: metadata?.repository?.name,
        lastUpdated: metadata ? new Date(metadata.lastUpdated) : undefined,
        dataSource: `${issues.length} issues analyzed`,
        isDataAvailable: isDataAvailable,
      }}
      warningMessage={!isDataAvailable
        ? 'Using sample data - run npm run fetch-data for real analytics'
        : undefined}
    />

    <!-- Key Metrics -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 space-lg">
      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">Total Issues</p>
            <p class="text-2xl font-bold text-heading">{metrics.totalIssues}</p>
          </div>
          <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
            <span class="text-blue-600 text-xl">üìã</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">Open Issues</p>
            <p class="text-2xl font-bold text-heading">{metrics.openIssues}</p>
          </div>
          <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
            <span class="text-green-600 text-xl">üîì</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">Closed Issues</p>
            <p class="text-2xl font-bold text-heading">{metrics.closedIssues}</p>
          </div>
          <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
            <span class="text-gray-600 text-xl">üîí</span>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-muted">Avg. Resolution Time</p>
            <p class="text-2xl font-bold text-heading">{metrics.averageResolutionTime}</p>
          </div>
          <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
            <span class="text-purple-600 text-xl">‚è±Ô∏è</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Interactive Charts -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 space-lg">
      <!-- Issue Trend Chart -->
      <div class="h-80">
        <IssueTrendsChart
          client:load
          height={300}
          data={issuesTrendData}
          title="Issue Creation Trend"
        />
      </div>

      <!-- Issue Categories -->
      <div class="h-80">
        <IssueCategoriesChart
          client:load
          height={300}
          data={categoriesData}
          title="Issue Categories"
        />
      </div>
    </div>

    <!-- Performance Metrics -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 space-lg">
      <div class="h-80">
        <ResolutionTimeChart
          client:load
          height={300}
          data={resolutionTimeData}
          title="Resolution Time Trends"
        />
      </div>

      <div class="h-80">
        <ContributorActivityChart
          client:load
          height={300}
          data={contributorData}
          title="Top Contributors"
        />
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Recent Activity -->
      <div class="lg:col-span-2">
        <div class="card">
          <h2 class="text-lg font-semibold text-heading mb-4">Recent Activity</h2>
          <div class="space-y-4">
            {
              recentActivity.slice(0, 8).map(activity => (
                <div class="flex items-start gap-3">
                  <div
                    class={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                      activity.type === 'closed'
                        ? 'bg-green-100'
                        : activity.type === 'opened'
                          ? 'bg-blue-100'
                          : 'bg-yellow-100'
                    }`}
                  >
                    <span
                      class={`text-sm ${
                        activity.type === 'closed'
                          ? 'text-green-600'
                          : activity.type === 'opened'
                            ? 'text-blue-600'
                            : 'text-yellow-600'
                      }`}
                    >
                      {activity.type === 'closed' ? '‚úì' : activity.type === 'opened' ? '+' : 'üí¨'}
                    </span>
                  </div>
                  <div>
                    <p class="text-sm text-heading">
                      <a
                        href={resolveUrl(`/issues/${activity.issue.number}`)}
                        class="hover:text-blue-600"
                      >
                        {activity.description}
                      </a>
                    </p>
                    <p class="text-xs text-muted">{formatTimeAgo(activity.timestamp)}</p>
                  </div>
                </div>
              ))
            }
            {
              recentActivity.length === 0 && (
                <p class="text-sm text-muted text-center py-4">No recent activity available</p>
              )
            }
          </div>
        </div>
      </div>

      <!-- Top Contributors -->
      <div class="lg:col-span-1">
        <div class="card">
          <h2 class="text-lg font-semibold text-heading mb-4">Top Contributors</h2>
          <div class="space-y-3">
            {
              metrics.topContributors.map((contributor, index) => (
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2">
                    <span class="w-6 h-6 bg-blue-100 text-blue-600 rounded-full text-xs flex items-center justify-center">
                      {index + 1}
                    </span>
                    <span class="text-sm text-heading">@{contributor.name}</span>
                  </div>
                  <span class="text-sm text-muted">{contributor.count} issues</span>
                </div>
              ))
            }
            {
              metrics.topContributors.length === 0 && (
                <p class="text-sm text-muted text-center py-4">No contributor data available</p>
              )
            }
          </div>
        </div>
      </div>
    </div>

    <!-- AI Insights -->
    <div class="mt-8">
      <div class="card">
        <h2 class="text-lg font-semibold text-heading mb-4">ü§ñ AI Insights</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 class="font-medium text-heading mb-2">Key Findings</h3>
            <ul class="space-y-2 text-sm text-muted">
              <li>‚Ä¢ Total of {metrics.totalIssues} issues tracked</li>
              <li>
                ‚Ä¢ {metrics.openIssues} issues currently open ({
                  Math.round((metrics.openIssues / metrics.totalIssues) * 100)
                }%)
              </li>
              <li>
                ‚Ä¢ Top label: {metrics.topLabels[0]?.name || 'None'} ({
                  metrics.topLabels[0]?.count || 0
                } issues)
              </li>
              <li>‚Ä¢ Average resolution time: {metrics.averageResolutionTime}</li>
            </ul>
          </div>
          <div>
            <h3 class="font-medium text-heading mb-2">Recommendations</h3>
            <ul class="space-y-2 text-sm text-muted">
              {
                metrics.openIssues > metrics.closedIssues && (
                  <li>‚Ä¢ Focus on closing open issues to improve resolution rate</li>
                )
              }
              {
                metrics.topLabels.length > 0 && metrics.topLabels[0] && (
                  <li>
                    ‚Ä¢ Consider organizing {metrics.topLabels[0].name} issues for better tracking
                  </li>
                )
              }
              <li>‚Ä¢ Review contributor activity and encourage participation</li>
              <li>‚Ä¢ Consider setting up automated issue classification</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</PageLayout>
