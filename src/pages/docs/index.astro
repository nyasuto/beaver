---
/**
 * Documentation index page - displays all available documentation
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import { DocsService } from '../../lib/services/DocsService.js';
import {
  getTranslator,
  getProjectInfo,
  getNavigationConfig,
  buildNavUrl,
} from '../../lib/config/docs.js';

// Load configuration and translations
const t = await getTranslator();
const projectInfo = await getProjectInfo();
const navConfig = await getNavigationConfig();

// Collect all documentation
const docsService = new DocsService();
const docsCollection = await docsService.collectDocs();

const pageTitle = t('docs.title');
const pageDescription =
  projectInfo.description ||
  `${projectInfo.name}„ÅÆÂÆåÂÖ®„Å™„Éâ„Ç≠„É•„É°„É≥„ÉàÈõÜ - „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åã„ÇâÈ´òÂ∫¶„Å™Ê©üËÉΩ„Åæ„Åß`;

// Prepare category data for rendering using configuration
const categoryTitles = navConfig.categories || {
  documentation: t('category.documentation'),
  general: t('category.general'),
  overview: t('category.overview'),
};

const categoriesArray = await Promise.all(
  Object.entries(docsCollection.categories).map(async ([categoryKey, docs]) => ({
    key: categoryKey,
    title: categoryTitles[categoryKey] || categoryKey,
    docs: await Promise.all(
      docs.map(async doc => ({
        ...doc,
        href: await buildNavUrl(doc.slug),
      }))
    ),
  }))
);

// Quick links removed as per user feedback
---

<PageLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">{projectInfo.emoji || 'üìö'} {pageTitle}</h1>
      <p class="text-xl text-gray-600 max-w-3xl">
        {pageDescription}
      </p>
    </div>

    <!-- Quick Links section removed as per user feedback -->

    {
      categoriesArray.map(category => (
        <div class="mb-10">
          <h2 class="text-2xl font-semibold text-gray-900 mb-6">{category.title}</h2>
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {category.docs.map(doc => {
              const docData = docsCollection.docs.find(d => d.slug === doc.slug);
              if (!docData) return null;

              return (
                <div class="border border-gray-200 rounded-lg hover:shadow-lg transition-shadow bg-white">
                  <div class="p-6">
                    <h3 class="font-semibold text-lg mb-2 text-gray-900">
                      <a href={doc.href} class="hover:text-blue-600 transition-colors">
                        {doc.title}
                      </a>
                    </h3>
                    {docData.metadata.description && (
                      <p class="text-gray-600 mb-4 line-clamp-2">{docData.metadata.description}</p>
                    )}
                    <div class="flex items-center justify-between text-sm text-gray-500">
                      <span>{docData.readingTime}ÂàÜ„ÅßË™≠„ÇÅ„Çã</span>
                      <span>{docData.wordCount}Ë™û</span>
                    </div>
                    {docData.metadata.tags && docData.metadata.tags.length > 0 && (
                      <div class="mt-3 flex flex-wrap gap-1">
                        {docData.metadata.tags.slice(0, 3).map(tag => (
                          <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ))
    }

    <div class="mt-12 p-6 bg-gray-50 rounded-lg">
      <h3 class="font-semibold text-lg mb-2">üîç {t('docs.search.placeholder')}</h3>
      <p class="text-gray-600">
        {t('docs.search.hint')}
      </p>
    </div>
  </div>
</PageLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
