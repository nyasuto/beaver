---
/**
 * Documentation index page - displays all available documentation
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import { DocsService } from '../../lib/services/DocsService.js';
import { getTranslator, getProjectInfo, getNavigationConfig } from '../../lib/config/docs.js';

// Load configuration and translations
const t = await getTranslator();
const projectInfo = await getProjectInfo();
const navConfig = await getNavigationConfig();

// Collect all documentation
const docsService = new DocsService();
const docsCollection = await docsService.collectDocs();

const pageTitle = t('docs.title');
const pageDescription =
  projectInfo.description ||
  `${projectInfo.name}„ÅÆÂÆåÂÖ®„Å™„Éâ„Ç≠„É•„É°„É≥„ÉàÈõÜ - „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åã„ÇâÈ´òÂ∫¶„Å™Ê©üËÉΩ„Åæ„Åß`;

// Prepare category data for rendering using configuration
const categoryTitles = navConfig.categories || {
  documentation: t('category.documentation'),
  general: t('category.general'),
  overview: t('category.overview'),
};

const categoriesArray = Object.entries(docsCollection.categories).map(([categoryKey, docs]) => ({
  key: categoryKey,
  title: categoryTitles[categoryKey] || categoryKey,
  docs,
}));

// Use configured quick links or defaults
const quickLinks = navConfig.quickLinks || [
  {
    title: t('docs.quickStart'),
    href: '/docs/readme',
    icon: 'üöÄ',
    description: t('quickStart.github.description'),
    color: 'blue' as const,
  },
  {
    title: t('docs.developerGuide'),
    href: '/docs/local-development',
    icon: 'üõ†Ô∏è',
    description: t('quickStart.development.description'),
    color: 'green' as const,
  },
  {
    title: t('docs.configuration'),
    href: '/docs/configuration',
    icon: 'üîß',
    description: t('quickStart.configuration.description'),
    color: 'purple' as const,
  },
];
---

<PageLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">{projectInfo.emoji || 'üìö'} {pageTitle}</h1>
      <p class="text-xl text-gray-600 max-w-3xl">
        {pageDescription}
      </p>
    </div>

    <!-- Quick Links -->
    {
      navConfig.showQuickLinks && quickLinks && quickLinks.length > 0 && (
        <div class="grid md:grid-cols-3 gap-6 mb-12">
          {quickLinks.slice(0, 3).map((link: any) => {
            const colorClasses = {
              blue: 'border-blue-200 bg-blue-50',
              green: 'border-green-200 bg-green-50',
              purple: 'border-purple-200 bg-purple-50',
              red: 'border-red-200 bg-red-50',
              yellow: 'border-yellow-200 bg-yellow-50',
              gray: 'border-gray-200 bg-gray-50',
            } as const;
            const textColorClasses = {
              blue: 'text-blue-600 hover:text-blue-800',
              green: 'text-green-600 hover:text-green-800',
              purple: 'text-purple-600 hover:text-purple-800',
              red: 'text-red-600 hover:text-red-800',
              yellow: 'text-yellow-600 hover:text-yellow-800',
              gray: 'text-gray-600 hover:text-gray-800',
            } as const;
            const color = link.color || 'blue';
            const borderBg = colorClasses[color as keyof typeof colorClasses] || colorClasses.blue;
            const textColor =
              textColorClasses[color as keyof typeof textColorClasses] || textColorClasses.blue;

            return (
              <div class={`border rounded-lg ${borderBg}`}>
                <div class="p-6">
                  <div class={`text-2xl mb-2 ${textColor.split(' ')[0]}`}>{link.icon || 'üìÑ'}</div>
                  <h3 class="font-semibold text-lg mb-2">{link.title}</h3>
                  <p class="text-gray-600 mb-4">{link.description}</p>
                  <a href={link.href} class={`font-medium ${textColor}`}>
                    {t('action.getStarted')}
                  </a>
                </div>
              </div>
            );
          })}
        </div>
      )
    }

    {
      categoriesArray.map(category => (
        <div class="mb-10">
          <h2 class="text-2xl font-semibold text-gray-900 mb-6">{category.title}</h2>
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {category.docs.map(doc => {
              const docData = docsCollection.docs.find(d => d.slug === doc.slug);
              if (!docData) return null;

              return (
                <div class="border border-gray-200 rounded-lg hover:shadow-lg transition-shadow bg-white">
                  <div class="p-6">
                    <h3 class="font-semibold text-lg mb-2 text-gray-900">
                      <a href={`/docs/${doc.slug}`} class="hover:text-blue-600 transition-colors">
                        {doc.title}
                      </a>
                    </h3>
                    {docData.metadata.description && (
                      <p class="text-gray-600 mb-4 line-clamp-2">{docData.metadata.description}</p>
                    )}
                    <div class="flex items-center justify-between text-sm text-gray-500">
                      <span>{docData.readingTime}ÂàÜ„ÅßË™≠„ÇÅ„Çã</span>
                      <span>{docData.wordCount}Ë™û</span>
                    </div>
                    {docData.metadata.tags && docData.metadata.tags.length > 0 && (
                      <div class="mt-3 flex flex-wrap gap-1">
                        {docData.metadata.tags.slice(0, 3).map(tag => (
                          <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ))
    }

    <div class="mt-12 p-6 bg-gray-50 rounded-lg">
      <h3 class="font-semibold text-lg mb-2">üîç {t('docs.search.placeholder')}</h3>
      <p class="text-gray-600">
        {t('docs.search.hint')}
      </p>
    </div>
  </div>
</PageLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
