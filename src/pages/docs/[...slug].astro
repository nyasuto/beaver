---
/**
 * Dynamic documentation page - displays individual documentation files
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import DocsLayout from '../../components/docs/DocsLayout.astro';
import { DocsService } from '../../lib/services/DocsService.js';
import {
  getTranslator,
  getProjectInfo,
  getUIConfig,
  buildEditUrl,
  buildNavUrl,
} from '../../lib/config/docs.js';

export async function getStaticPaths() {
  const docsService = new DocsService();
  const docsCollection = await docsService.collectDocs();

  return docsCollection.docs.map(doc => ({
    params: { slug: doc.slug },
    props: { doc, navigation: docsCollection.navigation },
  }));
}

const { doc, navigation } = Astro.props;

// Load configuration and translations
const t = await getTranslator();
const projectInfo = await getProjectInfo();
const uiConfig = await getUIConfig();

// Pre-build breadcrumb URLs
const breadcrumbsWithUrls = await Promise.all(
  doc.breadcrumbs.slice(1).map(async crumb => ({
    ...crumb,
    href: await buildNavUrl(crumb.slug),
  }))
);

// Pre-build related docs URLs
const relatedDocsWithUrls = await Promise.all(
  doc.relatedDocs.map(async relatedSlug => ({
    slug: relatedSlug,
    href: await buildNavUrl(relatedSlug),
  }))
);

if (!doc) {
  const docsBaseUrl = await buildNavUrl('');
  return Astro.redirect(docsBaseUrl);
}

const pageTitle = `${doc.metadata.title} - ${projectInfo.name} ${t('docs.title')}`;
const pageDescription = doc.metadata.description || `${doc.metadata.title}„Å´Èñ¢„Åô„Çã„Éâ„Ç≠„É•„É°„É≥„Éà`;
---

<PageLayout title={pageTitle} description={pageDescription}>
  <DocsLayout doc={doc} navigation={navigation}>
    <!-- Breadcrumbs -->
    <nav class="mb-6 text-sm">
      <ol class="flex items-center space-x-2 text-gray-500">
        <li><a href={await buildNavUrl('')} class="hover:text-blue-600">{t('docs.title')}</a></li>
        {
          breadcrumbsWithUrls.map((crumb, _index) => (
            <li class="flex items-center space-x-2">
              <span>/</span>
              <a href={crumb.href} class="hover:text-blue-600">
                {crumb.title}
              </a>
            </li>
          ))
        }
        <li class="flex items-center space-x-2">
          <span>/</span>
          <span class="text-gray-900">{doc.metadata.title}</span>
        </li>
      </ol>
    </nav>

    <!-- Document Header -->
    <header class="mb-8">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">{doc.metadata.title}</h1>
      {
        doc.metadata.description && (
          <p class="text-xl text-gray-600 mb-4">{doc.metadata.description}</p>
        )
      }

      <!-- Document Meta -->
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-6">
        {
          uiConfig.showReadingTime && (
            <span>
              üìñ {doc.readingTime}
              {t('docs.readingTime')}
            </span>
          )
        }
        {
          uiConfig.showWordCount && (
            <span>
              üìù {doc.wordCount}
              {t('docs.wordCount')}
            </span>
          )
        }
        {
          uiConfig.showLastModified && (
            <span>
              üìÖ{' '}
              {doc.metadata.lastModified.toLocaleDateString(
                uiConfig.language === 'ja' ? 'ja-JP' : 'en-US'
              )}
            </span>
          )
        }
      </div>

      <!-- Tags -->
      {
        doc.metadata.tags && doc.metadata.tags.length > 0 && (
          <div class="flex flex-wrap gap-2 mb-6">
            {doc.metadata.tags.map(tag => (
              <span class="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full">{tag}</span>
            ))}
          </div>
        )
      }
    </header>

    <!-- Table of Contents (if sections exist) -->
    {
      uiConfig.showTableOfContents && doc.sections.length > 0 && (
        <div class="mb-8 p-4 bg-gray-50 rounded-lg">
          <h2 class="font-semibold text-lg mb-3">üìã {t('docs.tableOfContents')}</h2>
          <nav>
            <ul class="space-y-1">
              {doc.sections.map(section => (
                <li style={`margin-left: ${(section.level - 1) * 1}rem`}>
                  <a href={`#${section.anchor}`} class="text-blue-600 hover:text-blue-800 text-sm">
                    {section.title}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        </div>
      )
    }

    <!-- Document Content -->
    <article class="prose prose-lg max-w-none">
      <div set:html={doc.htmlContent} />
    </article>

    <!-- Document Footer -->
    <footer class="mt-12 pt-8 border-t border-gray-200">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        {
          uiConfig.showLastModified && (
            <div class="text-sm text-gray-500">
              {t('docs.lastModified')}:{' '}
              {doc.metadata.lastModified.toLocaleDateString(
                uiConfig.language === 'ja' ? 'ja-JP' : 'en-US',
                {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                }
              )}
            </div>
          )
        }

        <div class="flex items-center gap-4">
          {
            uiConfig.showEditLink && projectInfo.editBaseUrl && (
              <a
                href={await buildEditUrl(doc.path)}
                class="text-sm text-blue-600 hover:text-blue-800"
                target="_blank"
                rel="noopener noreferrer"
              >
                üìù {t('docs.editPage')}
              </a>
            )
          }
          <a href={await buildNavUrl('')} class="text-sm text-gray-600 hover:text-gray-800">
            üìö {t('docs.backToList')}
          </a>
        </div>
      </div>
    </footer>

    <!-- Related Documents (if any) -->
    {
      doc.relatedDocs.length > 0 && (
        <section class="mt-12">
          <h2 class="text-2xl font-semibold text-gray-900 mb-4">Èñ¢ÈÄ£„Éâ„Ç≠„É•„É°„É≥„Éà</h2>
          <div class="grid md:grid-cols-2 gap-4">
            {relatedDocsWithUrls.slice(0, 4).map(relatedDoc => {
              // This would need to be enhanced to fetch related doc metadata
              return (
                <a
                  href={relatedDoc.href}
                  class="p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:shadow-sm transition-all"
                >
                  <div class="font-medium text-gray-900">{relatedDoc.slug}</div>
                </a>
              );
            })}
          </div>
        </section>
      )
    }
  </DocsLayout>
</PageLayout>

<style>
  /* Custom styles for documentation content */
  .prose {
    @apply text-gray-900;
  }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    @apply font-bold text-gray-900;
    scroll-margin-top: 2rem;
  }

  .prose h1 {
    @apply text-3xl mb-4 mt-8;
  }
  .prose h2 {
    @apply text-2xl mb-3 mt-6;
  }
  .prose h3 {
    @apply text-xl mb-2 mt-4;
  }

  .prose p {
    @apply mb-4 leading-relaxed;
  }

  .prose ul,
  .prose ol {
    @apply mb-4 ml-6;
  }

  .prose li {
    @apply mb-1;
  }

  .prose blockquote {
    @apply border-l-4 border-blue-200 pl-4 ml-0 italic text-gray-700 bg-blue-50 py-2;
  }

  .prose code {
    @apply bg-gray-100 px-1 py-0.5 rounded text-sm font-mono;
  }

  .prose pre {
    @apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto mb-4;
  }

  .prose pre code {
    @apply bg-transparent p-0;
  }

  .prose table {
    @apply w-full border-collapse border border-gray-300 mb-4;
  }

  .prose th,
  .prose td {
    @apply border border-gray-300 px-3 py-2 text-left;
  }

  .prose th {
    @apply bg-gray-50 font-semibold;
  }

  .prose a {
    @apply text-blue-600 hover:text-blue-800 hover:underline;
  }

  .prose img {
    @apply max-w-full h-auto rounded-lg shadow-sm;
  }
</style>
