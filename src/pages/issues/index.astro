---
/**
 * Issues List Page
 *
 * This page displays a list of GitHub issues with filtering and search capabilities.
 * Data is loaded from static JSON files generated by scripts/fetch-github-data.ts
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import {
  getIssuesOnlyWithFallback,
  getStaticMetadata,
  getLastUpdated,
  getDataAvailabilityStatus,
} from '../../lib/data/github';
import { resolveUrl } from '../../lib/utils/url';
import { getFilterOptions } from '../../lib/utils/search';
import { markdownToPlainText, truncateMarkdown } from '../../lib/utils/markdown';
import { createClassificationEngine } from '../../lib/classification/engine';

const title = 'Issue';
const description = 'AI搭載の洞察でGitHubのIssueを閲覧・分析';

// 静的データの読み込み（PRを除外したissueのみ）
const allIssues = getIssuesOnlyWithFallback();
let metadata = null;
let lastUpdated = null;

// データの包括的な利用可能性チェック
const dataStatus = getDataAvailabilityStatus();
let isDataAvailable = dataStatus.isDataAvailable;
let warningMessage = '';

try {
  if (dataStatus.hasStaticData) {
    metadata = getStaticMetadata();
    lastUpdated = getLastUpdated();

    // リポジトリが一致しない場合の警告メッセージ
    if (dataStatus.shouldShowWarning) {
      warningMessage = `静的データは ${metadata.repository.owner}/${metadata.repository.name} のものです`;
    }
  }
} catch (error) {
  console.error('メタデータの読み込みに失敗しました:', error);
  isDataAvailable = false;
  warningMessage =
    '静的データの読み込みに失敗しました。データ取得プロセスでエラーが発生した可能性があります。';
}

// 最新の Issue を先頭に表示
const issues = allIssues.sort(
  (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
);

// デフォルトはopenのissueのみ表示
const openIssues = issues.filter(issue => issue.state === 'open');
const closedIssues = issues.filter(issue => issue.state === 'closed');

// 表示用のissues（デフォルトはopenのみ）
const displayIssues = openIssues;

// Enhanced Classification Engine を使用してラベル統計を計算
const calculateEnhancedLabelStats = async (issueList: typeof issues) => {
  const engine = await createClassificationEngine({
    owner: 'nyasuto',
    repo: 'beaver',
  });

  // バッチで分類処理を実行
  const batchResult = await engine.classifyIssuesBatch(issueList, {
    owner: 'nyasuto',
    repo: 'beaver',
  });

  // 分類結果から統計を生成
  const priorityStats = { critical: 0, high: 0, medium: 0, low: 0 };
  const categoryStats: Record<string, number> = {};
  const labelCounts: Record<string, number> = {};

  batchResult.tasks.forEach(task => {
    // 優先度統計（Enhanced Classification Engine は 'backlog' も返す可能性があるため、マッピングする）
    const mappedPriority = task.priority === 'backlog' ? 'low' : task.priority;
    if (mappedPriority in priorityStats) {
      priorityStats[mappedPriority as keyof typeof priorityStats]++;
    }

    // カテゴリ統計
    categoryStats[task.category] = (categoryStats[task.category] || 0) + 1;

    // 元のラベル統計（後方互換性のため）
    task.labels.forEach(label => {
      labelCounts[label] = (labelCounts[label] || 0) + 1;
    });
  });

  return {
    priorityStats,
    categoryStats,
    labelCounts,
    classificationResults: batchResult.tasks,
  };
};

// Enhanced Classification を使用してラベル統計を計算
const enhancedStats = await calculateEnhancedLabelStats(openIssues);

// Issue を分類結果にマッピング
const issueClassificationMap = new Map();
enhancedStats.classificationResults.forEach(result => {
  issueClassificationMap.set(result.issueNumber, result);
});

// 後方互換性のためのラベルカテゴリ
const labelCategories = {
  priority: Object.entries(enhancedStats.priorityStats)
    .filter(([, count]) => count > 0)
    .map(([priority, count]) => [`priority: ${priority}`, count] as [string, number])
    .sort(([, a], [, b]) => b - a),
  type: Object.entries(enhancedStats.categoryStats)
    .filter(([, count]) => count > 0)
    .map(([category, count]) => [`type: ${category}`, count] as [string, number])
    .sort(([, a], [, b]) => b - a),
  other: Object.entries(enhancedStats.labelCounts)
    .filter(([labelName]) => !labelName.startsWith('priority:') && !labelName.startsWith('type:'))
    .sort(([, a], [, b]) => b - a),
};

// デフォルト表示用（後方互換性）
// Note: labelCounts は将来のフィルタリング機能で使用予定
// const labelCounts = enhancedStats.labelCounts;

// フィルターオプションの取得
const filterOptions = getFilterOptions(issues);
---

<PageLayout
  title={title}
  description={description}
  showHeader={true}
  showFooter={true}
  showSearch={false}
  maxWidth="7xl"
  padding="lg"
  class="page-background"
>
  <PageHeader
    title="Issue"
    description="AI搭載の分類と洞察でGitHubのIssueを閲覧・分析"
    icon="📋"
    metaInfo={{
      totalCount: issues.length,
      openCount: openIssues.length,
      closedCount: closedIssues.length,
      lastUpdated: lastUpdated || undefined,
      repositoryOwner: metadata?.repository?.owner,
      repositoryName: metadata?.repository?.name,
      isDataAvailable: isDataAvailable,
    }}
    warningMessage={warningMessage || undefined}
  />

  <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 space-lg">
    <!-- Filters Sidebar -->
    <aside class="lg:col-span-1">
      <div class="card">
        <h2 class="text-lg font-semibold text-heading mb-4">フィルター</h2>
        <div class="space-y-4">
          <div>
            <label class="label">ステータス</label>
            <select class="input" id="status-filter">
              <option value="open" selected>オープン ({openIssues.length})</option>
              <option value="closed">クローズ ({closedIssues.length})</option>
              <option value="all">すべて ({issues.length})</option>
            </select>
          </div>

          <div>
            <label class="label">ラベル</label>
            <div class="space-y-3 max-h-64 overflow-y-auto" id="label-filters">
              <!-- 優先度フィルター -->
              {
                labelCategories.priority.length > 0 && (
                  <div>
                    <h4 class="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 uppercase tracking-wide">
                      優先度
                    </h4>
                    <div class="space-y-1 pl-2">
                      {labelCategories.priority.map(([labelName, count]) => (
                        <label class="flex items-center">
                          <input
                            type="checkbox"
                            class="mr-2 label-filter"
                            value={labelName}
                            data-category="priority"
                          />
                          <span class="text-sm flex-1">
                            {labelName.replace('priority:', '').trim()}
                          </span>
                          <span class="text-xs text-muted">({count})</span>
                        </label>
                      ))}
                    </div>
                  </div>
                )
              }

              <!-- タイプフィルター -->
              {
                labelCategories.type.length > 0 && (
                  <div>
                    <h4 class="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 uppercase tracking-wide">
                      タイプ
                    </h4>
                    <div class="space-y-1 pl-2">
                      {labelCategories.type.map(([labelName, count]) => (
                        <label class="flex items-center">
                          <input
                            type="checkbox"
                            class="mr-2 label-filter"
                            value={labelName}
                            data-category="type"
                          />
                          <span class="text-sm flex-1">
                            {labelName.replace('type:', '').trim()}
                          </span>
                          <span class="text-xs text-muted">({count})</span>
                        </label>
                      ))}
                    </div>
                  </div>
                )
              }

              <!-- その他ラベル -->
              {
                labelCategories.other.length > 0 && (
                  <div>
                    <h4 class="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 uppercase tracking-wide">
                      その他
                    </h4>
                    <div class="space-y-1 pl-2">
                      {labelCategories.other.slice(0, 8).map(([labelName, count]) => (
                        <label class="flex items-center">
                          <input
                            type="checkbox"
                            class="mr-2 label-filter"
                            value={labelName}
                            data-category="other"
                          />
                          <span class="text-sm flex-1">{labelName}</span>
                          <span class="text-xs text-muted">({count})</span>
                        </label>
                      ))}
                    </div>
                  </div>
                )
              }
            </div>
          </div>

          <div>
            <label class="label">作成者</label>
            <select class="input" id="author-filter">
              <option value="">すべての作成者</option>
              {filterOptions.authors.map(author => <option value={author}>{author}</option>)}
            </select>
          </div>

          <div>
            <label class="label">担当者</label>
            <select class="input" id="assignee-filter">
              <option value="">すべての担当者</option>
              {
                filterOptions.assignees.map(assignee => (
                  <option value={assignee}>{assignee}</option>
                ))
              }
            </select>
          </div>

          {
            isDataAvailable && metadata && (
              <div class="pt-4 border-t">
                <h3 class="text-sm font-medium text-heading mb-2">リポジトリ</h3>
                <p class="text-sm text-muted">
                  {metadata.repository.owner}/{metadata.repository.name}
                </p>
              </div>
            )
          }
        </div>
      </div>
    </aside>

    <!-- Issues List -->
    <div class="lg:col-span-3">
      <div class="card">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
          <div class="flex items-center gap-4">
            <h2 class="text-lg font-semibold text-heading">Issue一覧</h2>
            <div class="flex items-center gap-2 text-sm text-muted" id="search-results-info">
              <span id="results-count">{displayIssues.length} 件の Issue を表示中</span>
              <span id="search-time" class="hidden"></span>
            </div>
          </div>
          <div class="flex flex-col sm:flex-row gap-2 mt-2 sm:mt-0">
            <div class="flex gap-2">
              <input
                type="search"
                placeholder="Issueを検索..."
                class="input w-64"
                id="search-input"
              />
              <button class="btn btn-secondary" id="clear-search" title="検索をクリア">✕</button>
            </div>
            <select class="input" id="sort-select">
              <option value="created-desc">作成日（新しい順）</option>
              <option value="created-asc">作成日（古い順）</option>
              <option value="updated-desc">更新日（新しい順）</option>
              <option value="updated-asc">更新日（古い順）</option>
              <option value="number-desc">Issue番号（降順）</option>
              <option value="number-asc">Issue番号（昇順）</option>
              <option value="priority-desc">優先度（高い順）</option>
              <option value="priority-asc">優先度（低い順）</option>
            </select>
          </div>
        </div>

        <div class="space-y-4" id="issues-container">
          {
            displayIssues.length === 0 && (
              <div class="text-center py-8">
                <p class="text-muted">
                  {isDataAvailable
                    ? 'Issue が見つかりません'
                    : 'データを取得するには npm run fetch-data を実行してください'}
                </p>
              </div>
            )
          }

          {
            displayIssues.map(issue => {
              const classification = issueClassificationMap.get(issue.number);
              return (
                <div
                  class="p-4 border rounded-md issue-card"
                  data-state={issue.state}
                  data-labels={issue.labels.map(l => l.name).join(',')}
                  data-author={issue.user?.login || ''}
                  data-assignees={issue.assignees?.map(a => a.login).join(',') || ''}
                  data-number={issue.number}
                  data-created={issue.created_at}
                  data-updated={issue.updated_at}
                  data-title={issue.title.toLowerCase()}
                  data-body={(issue.body || '').toLowerCase()}
                  data-priority={classification?.priority || 'low'}
                  data-category={classification?.category || 'other'}
                  data-confidence={classification?.confidence || 0}
                >
                  <div class="flex justify-between items-start mb-2">
                    <div class="flex-1">
                      <h3 class="font-medium text-heading">
                        <a
                          href={resolveUrl(`/issues/${issue.number}`)}
                          class="hover:text-blue-600 issue-title"
                        >
                          {issue.title}
                        </a>
                      </h3>
                      <p class="text-sm text-muted">
                        #{issue.number} • {issue.state === 'open' ? '🟢' : '🔴'}{' '}
                        {issue.state === 'open' ? 'オープン' : 'クローズ'} •
                        {issue.user?.login || 'Unknown'} •
                        {new Date(issue.created_at).toLocaleDateString('ja-JP')}
                      </p>
                    </div>
                    <div class="ml-4">
                      <span
                        class={`px-2 py-1 text-xs rounded font-medium ${
                          issue.state === 'open'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-gray-100 text-gray-800'
                        }`}
                      >
                        {issue.state === 'open' ? 'オープン' : 'クローズ'}
                      </span>
                    </div>
                  </div>

                  {issue.body && (
                    <p class="text-sm text-muted mt-2 line-clamp-3 issue-body">
                      {truncateMarkdown(markdownToPlainText(issue.body), 200)}
                    </p>
                  )}

                  {issue.labels.length > 0 && (
                    <div class="flex flex-wrap gap-1 mt-3">
                      {issue.labels.map(label => (
                        <span
                          class="px-2 py-1 text-xs rounded"
                          style={`background-color: #${label.color}20; color: #${label.color}`}
                        >
                          {label.name}
                        </span>
                      ))}
                    </div>
                  )}

                  <div class="flex justify-between items-center mt-3 pt-3 border-t text-xs text-muted">
                    <span>作成: {new Date(issue.created_at).toLocaleDateString('ja-JP')}</span>
                    <span>更新: {new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
                  </div>
                </div>
              );
            })
          }
        </div>

        <div class="mt-6 text-center" id="pagination-info">
          <p class="text-muted text-sm" id="pagination-text">
            {displayIssues.length} 件の Issue を表示中
          </p>
          <div class="mt-2 hidden" id="search-stats">
            <span class="text-xs text-muted" id="search-performance"></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</PageLayout>

<style>
  .search-highlight {
    background-color: yellow;
    color: black;
    font-weight: bold;
    padding: 0 2px;
    border-radius: 2px;
  }

  .issue-card.hidden {
    display: none;
  }

  .issue-card {
    transition: opacity 0.2s ease-in-out;
  }

  .issue-card.fade-out {
    opacity: 0.3;
  }

  .search-performance {
    font-size: 11px;
    color: #6b7280;
  }

  /* チェックボックスのデザイン改善 */
  .label-filter {
    appearance: none;
    width: 16px;
    height: 16px;
    border: 2px solid #d1d5db;
    border-radius: 3px;
    background-color: white;
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .label-filter:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
  }

  .label-filter:checked::after {
    content: '';
    position: absolute;
    left: 2px;
    top: -1px;
    width: 4px;
    height: 8px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }

  .label-filter:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .label-filter:hover {
    border-color: #9ca3af;
  }

  /* ダークモード対応 */
  .dark .label-filter {
    border-color: #6b7280;
    background-color: #374151;
  }

  .dark .label-filter:hover {
    border-color: #9ca3af;
  }
</style>

<script>
  // Import the extracted search manager class
  import { IssueSearchManager } from '../../lib/utils/search-manager';

  // Initialize search manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const searchManager = new IssueSearchManager('.issue-card');
    searchManager.initializeEventListeners();
    searchManager.updateLabelCounts();

    // Perform initial search to apply default filters
    const initialResult = searchManager.performSearch();
    console.log(
      `Loaded ${initialResult.totalCount} issues in ${initialResult.searchTime.toFixed(1)}ms`
    );
  });
</script>
