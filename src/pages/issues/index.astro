---
/**
 * Issues List Page
 *
 * This page displays a list of GitHub issues with filtering and search capabilities.
 * Data is loaded from static JSON files generated by scripts/fetch-github-data.ts
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import {
  getIssuesWithFallback,
  getStaticMetadata,
  hasStaticData,
  getLastUpdated,
} from '../../lib/data/github';
import { resolveUrl } from '../../lib/utils/url';
import { getFilterOptions } from '../../lib/utils/search';

const title = 'Issue';
const description = 'AI搭載の洞察でGitHubのIssueを閲覧・分析';

// 静的データの読み込み
let issues = getIssuesWithFallback();
let metadata = null;
let lastUpdated = null;
let isDataAvailable = hasStaticData();

try {
  if (isDataAvailable) {
    metadata = getStaticMetadata();
    lastUpdated = getLastUpdated();

    // 最新の Issue を先頭に表示
    issues = issues.sort(
      (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
    );
  }
} catch (error) {
  // eslint-disable-next-line no-console
  console.error('メタデータの読み込みに失敗しました:', error);
  isDataAvailable = false;
}

const openIssues = issues.filter(issue => issue.state === 'open');
const closedIssues = issues.filter(issue => issue.state === 'closed');

// ラベルの集計
const labelCounts = issues.reduce(
  (acc, issue) => {
    issue.labels.forEach(label => {
      acc[label.name] = (acc[label.name] || 0) + 1;
    });
    return acc;
  },
  {} as Record<string, number>
);

const sortedLabels = Object.entries(labelCounts)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 10); // 上位10ラベルのみ表示

// フィルターオプションの取得
const filterOptions = getFilterOptions(issues);
---

<PageLayout
  title={title}
  description={description}
  showHeader={true}
  showFooter={true}
  showSearch={false}
  maxWidth="7xl"
  padding="lg"
  class="page-background"
>
  <PageHeader
    title="Issue"
    description="AI搭載の分類と洞察でGitHubのIssueを閲覧・分析"
    icon="📋"
    metaInfo={{
      totalCount: issues.length,
      openCount: openIssues.length,
      closedCount: closedIssues.length,
      lastUpdated: lastUpdated || undefined,
      repositoryOwner: metadata?.repository?.owner,
      repositoryName: metadata?.repository?.name,
      isDataAvailable: isDataAvailable,
    }}
  />

  <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 space-lg">
    <!-- Filters Sidebar -->
    <aside class="lg:col-span-1">
      <div class="card">
        <h2 class="text-lg font-semibold text-heading mb-4">フィルター</h2>
        <div class="space-y-4">
          <div>
            <label class="label">ステータス</label>
            <select class="input" id="status-filter">
              <option value="all">すべて ({issues.length})</option>
              <option value="open">オープン ({openIssues.length})</option>
              <option value="closed">クローズ ({closedIssues.length})</option>
            </select>
          </div>

          <div>
            <label class="label">ラベル</label>
            <div class="space-y-2 max-h-48 overflow-y-auto" id="label-filters">
              {
                sortedLabels.map(([labelName, count]) => (
                  <label class="flex items-center">
                    <input type="checkbox" class="mr-2 label-filter" value={labelName} />
                    <span class="text-sm flex-1">{labelName}</span>
                    <span class="text-xs text-muted">({count})</span>
                  </label>
                ))
              }
            </div>
          </div>

          <div>
            <label class="label">作成者</label>
            <select class="input" id="author-filter">
              <option value="">すべての作成者</option>
              {filterOptions.authors.map(author => <option value={author}>{author}</option>)}
            </select>
          </div>

          <div>
            <label class="label">担当者</label>
            <select class="input" id="assignee-filter">
              <option value="">すべての担当者</option>
              {
                filterOptions.assignees.map(assignee => (
                  <option value={assignee}>{assignee}</option>
                ))
              }
            </select>
          </div>

          {
            isDataAvailable && metadata && (
              <div class="pt-4 border-t">
                <h3 class="text-sm font-medium text-heading mb-2">リポジトリ</h3>
                <p class="text-sm text-muted">
                  {metadata.repository.owner}/{metadata.repository.name}
                </p>
              </div>
            )
          }
        </div>
      </div>
    </aside>

    <!-- Issues List -->
    <div class="lg:col-span-3">
      <div class="card">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
          <div class="flex items-center gap-4">
            <h2 class="text-lg font-semibold text-heading">Issue一覧</h2>
            <div class="flex items-center gap-2 text-sm text-muted" id="search-results-info">
              <span id="results-count">{issues.length} 件の Issue を表示中</span>
              <span id="search-time" class="hidden"></span>
            </div>
          </div>
          <div class="flex flex-col sm:flex-row gap-2 mt-2 sm:mt-0">
            <div class="flex gap-2">
              <input
                type="search"
                placeholder="Issueを検索..."
                class="input w-64"
                id="search-input"
              />
              <button class="btn btn-secondary" id="clear-search" title="検索をクリア">✕</button>
            </div>
            <select class="input" id="sort-select">
              <option value="created-desc">作成日（新しい順）</option>
              <option value="created-asc">作成日（古い順）</option>
              <option value="updated-desc">更新日（新しい順）</option>
              <option value="updated-asc">更新日（古い順）</option>
              <option value="number-desc">Issue番号（降順）</option>
              <option value="number-asc">Issue番号（昇順）</option>
              <option value="priority-desc">優先度（高い順）</option>
              <option value="priority-asc">優先度（低い順）</option>
            </select>
          </div>
        </div>

        <div class="space-y-4" id="issues-container">
          {
            issues.length === 0 && (
              <div class="text-center py-8">
                <p class="text-muted">
                  {isDataAvailable
                    ? 'Issue が見つかりません'
                    : 'データを取得するには npm run fetch-data を実行してください'}
                </p>
              </div>
            )
          }

          {
            issues.map(issue => (
              <div
                class="p-4 border rounded-md issue-card"
                data-state={issue.state}
                data-labels={issue.labels.map(l => l.name).join(',')}
                data-author={issue.user?.login || ''}
                data-assignees={issue.assignees?.map(a => a.login).join(',') || ''}
                data-number={issue.number}
                data-created={issue.created_at}
                data-updated={issue.updated_at}
                data-title={issue.title.toLowerCase()}
                data-body={(issue.body || '').toLowerCase()}
              >
                <div class="flex justify-between items-start mb-2">
                  <div class="flex-1">
                    <h3 class="font-medium text-heading">
                      <a
                        href={resolveUrl(`/issues/${issue.number}`)}
                        class="hover:text-blue-600 issue-title"
                      >
                        {issue.title}
                      </a>
                    </h3>
                    <p class="text-sm text-muted">
                      #{issue.number} • {issue.state === 'open' ? '🟢' : '🔴'}{' '}
                      {issue.state === 'open' ? 'オープン' : 'クローズ'} •
                      {issue.user?.login || 'Unknown'} •
                      {new Date(issue.created_at).toLocaleDateString('ja-JP')}
                    </p>
                  </div>
                  <div class="ml-4">
                    <span
                      class={`px-2 py-1 text-xs rounded font-medium ${
                        issue.state === 'open'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      {issue.state === 'open' ? 'オープン' : 'クローズ'}
                    </span>
                  </div>
                </div>

                {issue.body && (
                  <p class="text-sm text-muted mt-2 line-clamp-3 issue-body">
                    {issue.body.substring(0, 200)}
                    {issue.body.length > 200 && '...'}
                  </p>
                )}

                {issue.labels.length > 0 && (
                  <div class="flex flex-wrap gap-1 mt-3">
                    {issue.labels.map(label => (
                      <span
                        class="px-2 py-1 text-xs rounded"
                        style={`background-color: #${label.color}20; color: #${label.color}`}
                      >
                        {label.name}
                      </span>
                    ))}
                  </div>
                )}

                <div class="flex justify-between items-center mt-3 pt-3 border-t text-xs text-muted">
                  <span>作成: {new Date(issue.created_at).toLocaleDateString('ja-JP')}</span>
                  <span>更新: {new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
                </div>
              </div>
            ))
          }
        </div>

        <div class="mt-6 text-center" id="pagination-info">
          <p class="text-muted text-sm" id="pagination-text">{issues.length} 件の Issue を表示中</p>
          <div class="mt-2 hidden" id="search-stats">
            <span class="text-xs text-muted" id="search-performance"></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</PageLayout>

<style>
  .search-highlight {
    background-color: yellow;
    color: black;
    font-weight: bold;
    padding: 0 2px;
    border-radius: 2px;
  }

  .issue-card.hidden {
    display: none;
  }

  .issue-card {
    transition: opacity 0.2s ease-in-out;
  }

  .issue-card.fade-out {
    opacity: 0.3;
  }

  .search-performance {
    font-size: 11px;
    color: #6b7280;
  }
</style>

<script>
  // Import search utilities types for TypeScript support
  interface SearchFilters {
    state?: 'open' | 'closed' | 'all';
    labels?: string[];
    author?: string | undefined;
    assignee?: string | undefined;
  }

  class IssueSearchManager {
    private allIssues: HTMLElement[];
    private currentFilters: SearchFilters = { state: 'all', labels: [] };
    private currentQuery = '';
    private currentSort = { by: 'created', order: 'desc' };

    constructor() {
      this.allIssues = Array.from(document.querySelectorAll('.issue-card'));
      this.initializeEventListeners();
    }

    private initializeEventListeners() {
      // Search input
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      if (searchInput) {
        let searchTimeout: ReturnType<typeof setTimeout>;
        searchInput.addEventListener('input', e => {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            this.currentQuery = (e.target as HTMLInputElement).value;
            this.performSearch();
          }, 300); // Debounce 300ms
        });
      }

      // Clear search button
      const clearSearch = document.getElementById('clear-search');
      if (clearSearch) {
        clearSearch.addEventListener('click', () => {
          if (searchInput) {
            searchInput.value = '';
            this.currentQuery = '';
            this.performSearch();
          }
        });
      }

      // Status filter
      const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
      if (statusFilter) {
        statusFilter.addEventListener('change', e => {
          const value = (e.target as HTMLSelectElement).value;
          this.currentFilters.state = value as 'open' | 'closed' | 'all';
          this.performSearch();
        });
      }

      // Label filters
      const labelFilters = document.querySelectorAll('.label-filter');
      labelFilters.forEach(filter => {
        filter.addEventListener('change', () => {
          this.currentFilters.labels = Array.from(
            document.querySelectorAll('.label-filter:checked')
          ).map(checkbox => (checkbox as HTMLInputElement).value);
          this.performSearch();
        });
      });

      // Author filter
      const authorFilter = document.getElementById('author-filter') as HTMLSelectElement;
      if (authorFilter) {
        authorFilter.addEventListener('change', e => {
          const value = (e.target as HTMLSelectElement).value;
          this.currentFilters.author = value === '' ? undefined : value;
          this.performSearch();
        });
      }

      // Assignee filter
      const assigneeFilter = document.getElementById('assignee-filter') as HTMLSelectElement;
      if (assigneeFilter) {
        assigneeFilter.addEventListener('change', e => {
          const value = (e.target as HTMLSelectElement).value;
          this.currentFilters.assignee = value === '' ? undefined : value;
          this.performSearch();
        });
      }

      // Sort dropdown
      const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
      if (sortSelect) {
        sortSelect.addEventListener('change', e => {
          const [sortBy, sortOrder] = (e.target as HTMLSelectElement).value.split('-');
          this.currentSort = {
            by: sortBy as string,
            order: sortOrder as string,
          };
          this.performSearch();
        });
      }
    }

    private performSearch() {
      const startTime = performance.now();

      // Text search
      let filteredIssues = this.allIssues.filter(issue => {
        if (!this.currentQuery.trim()) return true;

        const title = issue.getAttribute('data-title') || '';
        const body = issue.getAttribute('data-body') || '';
        const author = issue.getAttribute('data-author') || '';
        const labels = issue.getAttribute('data-labels') || '';

        const searchText = `${title} ${body} ${author} ${labels}`.toLowerCase();
        const searchTerms = this.currentQuery
          .toLowerCase()
          .split(/\s+/)
          .filter(term => term.length > 0);

        return searchTerms.every(term => searchText.includes(term));
      });

      // State filter
      if (this.currentFilters.state && this.currentFilters.state !== 'all') {
        filteredIssues = filteredIssues.filter(
          issue => issue.getAttribute('data-state') === this.currentFilters.state
        );
      }

      // Label filter
      if (this.currentFilters.labels && this.currentFilters.labels.length > 0) {
        filteredIssues = filteredIssues.filter(issue => {
          const issueLabels = (issue.getAttribute('data-labels') || '').split(',');
          return (
            this.currentFilters.labels?.every(filterLabel => issueLabels.includes(filterLabel)) ??
            false
          );
        });
      }

      // Author filter
      if (this.currentFilters.author) {
        filteredIssues = filteredIssues.filter(
          issue =>
            issue.getAttribute('data-author')?.toLowerCase() ===
            this.currentFilters.author?.toLowerCase()
        );
      }

      // Assignee filter
      if (this.currentFilters.assignee) {
        filteredIssues = filteredIssues.filter(issue => {
          const assignees = (issue.getAttribute('data-assignees') || '').split(',');
          return assignees.some(
            assignee => assignee.toLowerCase() === this.currentFilters.assignee?.toLowerCase()
          );
        });
      }

      // Sorting
      filteredIssues.sort((a, b) => {
        let aValue: string | number;
        let bValue: string | number;

        switch (this.currentSort.by) {
          case 'created':
            aValue = new Date(a.getAttribute('data-created') || '').getTime();
            bValue = new Date(b.getAttribute('data-created') || '').getTime();
            break;
          case 'updated':
            aValue = new Date(a.getAttribute('data-updated') || '').getTime();
            bValue = new Date(b.getAttribute('data-updated') || '').getTime();
            break;
          case 'number':
            aValue = parseInt(a.getAttribute('data-number') || '0');
            bValue = parseInt(b.getAttribute('data-number') || '0');
            break;
          case 'priority':
            aValue = this.getPriorityValue(a);
            bValue = this.getPriorityValue(b);
            break;
          default:
            return 0;
        }

        const result = aValue > bValue ? 1 : aValue < bValue ? -1 : 0;
        return this.currentSort.order === 'desc' ? -result : result;
      });

      // Update UI
      this.updateIssueDisplay(filteredIssues);
      this.highlightSearchTerms();
      this.updateResultsInfo(filteredIssues.length, performance.now() - startTime);
    }

    private getPriorityValue(issue: HTMLElement): number {
      const labels = (issue.getAttribute('data-labels') || '').toLowerCase();
      if (labels.includes('priority: critical')) return 4;
      if (labels.includes('priority: high')) return 3;
      if (labels.includes('priority: medium')) return 2;
      if (labels.includes('priority: low')) return 1;
      return 0;
    }

    private updateIssueDisplay(filteredIssues: HTMLElement[]) {
      // Hide all issues first
      this.allIssues.forEach(issue => {
        issue.classList.add('hidden');
      });

      // Show filtered issues in sorted order
      const container = document.getElementById('issues-container');
      if (container) {
        // Clear container
        const existingIssues = container.querySelectorAll('.issue-card');
        existingIssues.forEach(issue => issue.remove());

        // Add filtered issues in correct order
        filteredIssues.forEach(issue => {
          issue.classList.remove('hidden');
          container.appendChild(issue);
        });
      }
    }

    private highlightSearchTerms() {
      if (!this.currentQuery.trim()) return;

      const searchTerms = this.currentQuery
        .toLowerCase()
        .split(/\s+/)
        .filter(term => term.length > 0);

      // Highlight in titles and bodies
      document.querySelectorAll('.issue-title, .issue-body').forEach(element => {
        if (element.textContent) {
          let highlightedText = element.textContent;

          searchTerms.forEach(term => {
            const regex = new RegExp(`(${this.escapeRegExp(term)})`, 'gi');
            highlightedText = highlightedText.replace(
              regex,
              '<mark class="search-highlight">$1</mark>'
            );
          });

          element.innerHTML = highlightedText;
        }
      });
    }

    private escapeRegExp(string: string): string {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    private updateResultsInfo(count: number, searchTime: number) {
      const resultsCount = document.getElementById('results-count');
      const searchTimeElement = document.getElementById('search-time');
      const paginationText = document.getElementById('pagination-text');
      const searchStats = document.getElementById('search-stats');
      const searchPerformance = document.getElementById('search-performance');

      if (resultsCount) {
        resultsCount.textContent = `${count} 件の Issue を表示中`;
      }

      if (paginationText) {
        const totalIssues = this.allIssues.length;
        if (count === totalIssues) {
          paginationText.textContent = `${count} 件の Issue を表示中`;
        } else {
          paginationText.textContent = `${totalIssues} 件中 ${count} 件の Issue を表示中`;
        }
      }

      if (searchTimeElement && this.currentQuery.trim()) {
        searchTimeElement.textContent = `(検索時間: ${searchTime.toFixed(1)}ms)`;
        searchTimeElement.classList.remove('hidden');
      } else if (searchTimeElement) {
        searchTimeElement.classList.add('hidden');
      }

      if (searchStats && searchPerformance) {
        if (this.currentQuery.trim() || this.hasActiveFilters()) {
          searchPerformance.textContent = `検索完了: ${searchTime.toFixed(1)}ms`;
          searchStats.classList.remove('hidden');
        } else {
          searchStats.classList.add('hidden');
        }
      }
    }

    private hasActiveFilters(): boolean {
      return (
        (this.currentFilters.state && this.currentFilters.state !== 'all') ||
        (this.currentFilters.labels && this.currentFilters.labels.length > 0) ||
        Boolean(this.currentFilters.author) ||
        Boolean(this.currentFilters.assignee)
      );
    }
  }

  // Initialize search manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new IssueSearchManager();
  });
</script>
