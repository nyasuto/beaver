---
/**
 * Issues List Page
 *
 * This page displays a list of GitHub issues with filtering and search capabilities.
 * Data is loaded from static JSON files generated by scripts/fetch-github-data.ts
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import {
  getIssuesWithFallback,
  getStaticMetadata,
  hasStaticData,
  getLastUpdated,
} from '../../lib/data/github';

const title = 'Issues';
const description = 'Browse and analyze GitHub issues with AI-powered insights';

const breadcrumbs = [
  { name: 'Home', href: '/' },
  { name: 'Issues', href: '/issues' },
];

// 静的データの読み込み
let issues = getIssuesWithFallback();
let metadata = null;
let lastUpdated = null;
let isDataAvailable = hasStaticData();

try {
  if (isDataAvailable) {
    metadata = getStaticMetadata();
    lastUpdated = getLastUpdated();

    // 最新の Issue を先頭に表示
    issues = issues.sort(
      (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
    );
  }
} catch (error) {
  // eslint-disable-next-line no-console
  console.error('メタデータの読み込みに失敗しました:', error);
  isDataAvailable = false;
}

const openIssues = issues.filter(issue => issue.state === 'open');
const closedIssues = issues.filter(issue => issue.state === 'closed');

// ラベルの集計
const labelCounts = issues.reduce(
  (acc, issue) => {
    issue.labels.forEach(label => {
      acc[label.name] = (acc[label.name] || 0) + 1;
    });
    return acc;
  },
  {} as Record<string, number>
);

const sortedLabels = Object.entries(labelCounts)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 10); // 上位10ラベルのみ表示
---

<PageLayout
  title={title}
  description={description}
  breadcrumbs={breadcrumbs}
  showHeader={true}
  showFooter={true}
  showSearch={true}
  maxWidth="7xl"
  padding="lg"
>
  <div class="mb-8">
    <div class="flex justify-between items-start">
      <div>
        <h1 class="text-3xl font-bold text-heading mb-2">📋 Issues</h1>
        <p class="text-muted">
          Browse and analyze GitHub issues with AI-powered classification and insights
        </p>
      </div>
      <div class="text-right">
        {
          isDataAvailable && metadata && (
            <div class="text-sm text-muted">
              <p>総 Issue 数: {issues.length}</p>
              <p>
                オープン: {openIssues.length} / クローズ: {closedIssues.length}
              </p>
              <p>最終更新: {lastUpdated?.toLocaleDateString('ja-JP')}</p>
            </div>
          )
        }
        {
          !isDataAvailable && (
            <div class="text-sm text-yellow-600 bg-yellow-50 px-3 py-2 rounded">
              ⚠️ 静的データが未生成です
            </div>
          )
        }
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
    <!-- Filters Sidebar -->
    <aside class="lg:col-span-1">
      <div class="card">
        <h2 class="text-lg font-semibold text-heading mb-4">Filters</h2>
        <div class="space-y-4">
          <div>
            <label class="label">Status</label>
            <select class="input" id="status-filter">
              <option value="all">All ({issues.length})</option>
              <option value="open">Open ({openIssues.length})</option>
              <option value="closed">Closed ({closedIssues.length})</option>
            </select>
          </div>

          <div>
            <label class="label">Labels</label>
            <div class="space-y-2 max-h-48 overflow-y-auto">
              {
                sortedLabels.map(([labelName, count]) => (
                  <label class="flex items-center">
                    <input type="checkbox" class="mr-2" value={labelName} />
                    <span class="text-sm flex-1">{labelName}</span>
                    <span class="text-xs text-muted">({count})</span>
                  </label>
                ))
              }
            </div>
          </div>

          {
            isDataAvailable && metadata && (
              <div class="pt-4 border-t">
                <h3 class="text-sm font-medium text-heading mb-2">Repository</h3>
                <p class="text-sm text-muted">
                  {metadata.repository.owner}/{metadata.repository.name}
                </p>
              </div>
            )
          }
        </div>
      </div>
    </aside>

    <!-- Issues List -->
    <div class="lg:col-span-3">
      <div class="card">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
          <h2 class="text-lg font-semibold text-heading">Issues List</h2>
          <div class="flex gap-2 mt-2 sm:mt-0">
            <input
              type="search"
              placeholder="Search issues..."
              class="input w-64"
              id="search-input"
            />
            <button class="btn btn-primary" id="search-button">Search</button>
          </div>
        </div>

        <div class="space-y-4" id="issues-container">
          {
            issues.length === 0 && (
              <div class="text-center py-8">
                <p class="text-muted">
                  {isDataAvailable
                    ? 'Issue が見つかりません'
                    : 'データを取得するには npm run fetch-data を実行してください'}
                </p>
              </div>
            )
          }

          {
            issues.map(issue => (
              <div
                class="p-4 border rounded-md issue-card"
                data-state={issue.state}
                data-labels={issue.labels.map(l => l.name).join(',')}
              >
                <div class="flex justify-between items-start mb-2">
                  <div class="flex-1">
                    <h3 class="font-medium text-heading">
                      <a href={`/issues/${issue.number}`} class="hover:text-blue-600">
                        {issue.title}
                      </a>
                    </h3>
                    <p class="text-sm text-muted">
                      #{issue.number} • {issue.state === 'open' ? '🟢' : '🔴'} {issue.state} •
                      {issue.user?.login || 'Unknown'} •
                      {new Date(issue.created_at).toLocaleDateString('ja-JP')}
                    </p>
                  </div>
                  <div class="ml-4">
                    <span
                      class={`px-2 py-1 text-xs rounded font-medium ${
                        issue.state === 'open'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      {issue.state}
                    </span>
                  </div>
                </div>

                {issue.body && (
                  <p class="text-sm text-muted mt-2 line-clamp-3">
                    {issue.body.substring(0, 200)}
                    {issue.body.length > 200 && '...'}
                  </p>
                )}

                {issue.labels.length > 0 && (
                  <div class="flex flex-wrap gap-1 mt-3">
                    {issue.labels.map(label => (
                      <span
                        class="px-2 py-1 text-xs rounded"
                        style={`background-color: #${label.color}20; color: #${label.color}`}
                      >
                        {label.name}
                      </span>
                    ))}
                  </div>
                )}

                <div class="flex justify-between items-center mt-3 pt-3 border-t text-xs text-muted">
                  <span>作成: {new Date(issue.created_at).toLocaleDateString('ja-JP')}</span>
                  <span>更新: {new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
                </div>
              </div>
            ))
          }
        </div>

        {
          isDataAvailable && (
            <div class="mt-6 text-center">
              <p class="text-muted text-sm">{issues.length} 件の Issue を表示中</p>
            </div>
          )
        }
      </div>
    </div>
  </div>
</PageLayout>
