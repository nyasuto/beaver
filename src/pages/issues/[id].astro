---
/**
 * Issue Detail Page
 *
 * This page displays detailed information about a specific GitHub issue.
 * Data is loaded from static JSON files generated by scripts/fetch-github-data.ts
 */

import PageLayout from '../../components/layouts/PageLayout.astro';
import { getIssuesWithFallback, getStaticIssueById, hasStaticData } from '../../lib/data/github';
import { resolveUrl } from '../../lib/utils/url';
import { markdownToHtml } from '../../lib/utils/markdown';
// TODO: Re-enable when enhanced classification is implemented
// import { createEnhancedClassificationEngine } from '../../lib/classification/enhanced-engine';
// import { enhancedConfigManager } from '../../lib/classification/enhanced-config-manager';
import ClassificationDetails from '../../components/classification/ClassificationDetails.astro';
import type { EnhancedIssueClassification } from '../../lib/schemas/enhanced-classification';

export function getStaticPaths() {
  try {
    if (!hasStaticData()) {
      // データが無い場合は空のパスを返す
      return [];
    }

    const issues = getIssuesWithFallback();
    return issues.map(issue => ({
      params: { id: issue.number.toString() },
      props: { issue },
    }));
  } catch (error) {
    console.error('静的パス生成エラー:', error);
    return [];
  }
}

const { id } = Astro.params;
const { issue } = Astro.props;

// props から issue が取得できない場合の fallback
const currentIssue = issue || getStaticIssueById(parseInt(id || '0'));

if (!currentIssue) {
  return Astro.redirect(resolveUrl('/issues'));
}

const title = `Issue #${currentIssue.number}: ${currentIssue.title}`;
const description = `Detailed view of GitHub issue #${currentIssue.number} with AI-powered analysis`;

// Issue 本文の markdown 処理
const processedBody = currentIssue.body ? await markdownToHtml(currentIssue.body) : '';

// Generate enhanced classification for the current issue
let issueClassification: EnhancedIssueClassification | null = null;

try {
  // TODO: Implement enhanced classification engine integration
  // For now, use simple heuristic-based classification
  const hasLabels = currentIssue.labels.length > 0;
  const hasAssignees = currentIssue.assignees && currentIssue.assignees.length > 0;

  // Simple heuristic classification
  const category = currentIssue.title.toLowerCase().includes('bug')
    ? 'bug'
    : currentIssue.title.toLowerCase().includes('feature')
      ? 'feature'
      : 'enhancement';
  const priority = hasLabels ? 'high' : 'medium';

  // Create classification result
  issueClassification = {
    issueId: currentIssue.number,
    issueNumber: currentIssue.number,
    primaryCategory: category,
    primaryConfidence: 0.75,
    estimatedPriority: priority,
    priorityConfidence: 0.68,
    score: 70 + (hasLabels ? 10 : 0) + (hasAssignees ? 5 : 0),
    scoreBreakdown: {
      category: 25,
      priority: 20,
      confidence: 15,
      recency: 10,
    },
    classifications: [
      {
        category: category,
        confidence: 0.75,
        ruleName: 'Simple Heuristic Classification',
        reasons: [
          `Title suggests ${category} type`,
          `Priority determined as ${priority}`,
          hasLabels ? 'Issue has labels' : 'No labels present',
        ],
        keywords: [category, priority],
      },
    ],
    processingTimeMs: 15,
    algorithmVersion: '1.0.0',
    configVersion: '1.0.0',
    profileId: 'default',
    // createdAt: new Date().toISOString(), // TODO: Add to schema
    cacheHit: false,
    metadata: {
      titleLength: currentIssue.title.length,
      bodyLength: currentIssue.body?.length || 0,
      hasCodeBlocks: (currentIssue.body || '').includes('```'),
      hasStepsToReproduce: (currentIssue.body || '').toLowerCase().includes('steps to reproduce'),
      hasExpectedBehavior: (currentIssue.body || '').toLowerCase().includes('expected'),
      labelCount: currentIssue.labels.length,
      existingLabels: currentIssue.labels.map(l => l.name),
    },
  };
} catch (error) {
  console.error('Classification generation failed:', error);
  // Use fallback classification data
  issueClassification = {
    issueId: currentIssue.number,
    issueNumber: currentIssue.number,
    primaryCategory: 'enhancement',
    primaryConfidence: 0.85,
    estimatedPriority: 'medium',
    priorityConfidence: 0.72,
    score: 75,
    scoreBreakdown: {
      category: 25,
      priority: 20,
      confidence: 15,
      recency: 15,
    },
    classifications: [
      {
        category: 'enhancement',
        confidence: 0.85,
        ruleName: 'Enhancement Detection',
        reasons: [
          '機能改善に関するキーワードが含まれています',
          'ユーザーエクスペリエンス向上の内容です',
        ],
        keywords: ['enhancement', 'improvement', 'feature'],
      },
      {
        category: 'enhancement',
        confidence: 0.65,
        ruleName: 'UI Component Detection',
        reasons: ['UIコンポーネントに関する内容です'],
        keywords: ['ui', 'component', 'interface'],
      },
    ],
    processingTimeMs: 45,
    algorithmVersion: '2.1.0',
    configVersion: '1.0.0',
    profileId: 'default',
    // createdAt: new Date().toISOString(), // TODO: Add to schema
    cacheHit: false,
    metadata: {
      titleLength: currentIssue.title.length,
      bodyLength: currentIssue.body?.length || 0,
      hasCodeBlocks: (currentIssue.body || '').includes('```'),
      hasStepsToReproduce: (currentIssue.body || '').toLowerCase().includes('steps to reproduce'),
      hasExpectedBehavior: (currentIssue.body || '').toLowerCase().includes('expected'),
      labelCount: currentIssue.labels.length,
      existingLabels: currentIssue.labels.map(l => l.name),
    },
  };
}
---

<PageLayout
  title={title}
  description={description}
  showHeader={true}
  showFooter={true}
  showSearch={false}
  maxWidth="7xl"
  padding="lg"
>
  <!-- Issue Header -->
  <div class="card mb-6">
    <div class="flex items-start justify-between">
      <div>
        <h1 class="text-2xl font-bold text-heading mb-2">
          Issue #{currentIssue.number}: {currentIssue.title}
        </h1>
        <div class="flex items-center gap-4 text-sm text-muted">
          <span>
            Opened {new Date(currentIssue.created_at).toLocaleDateString('ja-JP')} by @{
              currentIssue.user?.login || 'Unknown'
            }
          </span>
          <span
            class={`inline-block w-2 h-2 rounded-full ${
              currentIssue.state === 'open' ? 'bg-green-500' : 'bg-red-500'
            }`}></span>
          <span class={currentIssue.state === 'open' ? 'text-green-600' : 'text-red-600'}>
            {currentIssue.state === 'open' ? 'Open' : 'Closed'}
          </span>
        </div>
      </div>
      <div class="flex gap-2">
        {
          currentIssue.labels.map(label => (
            <span
              class="px-2 py-1 text-xs rounded font-medium"
              style={`background-color: #${label.color}20; color: #${label.color}`}
            >
              {label.name}
            </span>
          ))
        }
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Issue Content -->
    <div class="lg:col-span-2 space-y-6">
      <!-- Description -->
      <div class="card">
        <h2 class="text-lg font-semibold text-heading mb-4">Description</h2>
        <div class="prose dark:prose-invert max-w-none">
          {
            currentIssue.body ? (
              <div set:html={processedBody} />
            ) : (
              <p class="text-muted">この Issue には説明がありません。</p>
            )
          }
        </div>
      </div>

      <!-- Comments -->
      <div class="card">
        <h2 class="text-lg font-semibold text-heading mb-4">Comments</h2>
        <div class="space-y-4">
          <div class="text-center py-8">
            <p class="text-muted">
              コメント機能は現在実装されていません。<br />
              GitHub API の comments エンドポイントを統合する予定です。
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="lg:col-span-1 space-y-6">
      <!-- Enhanced Classification Analysis -->
      <div class="card">
        <h3 class="text-lg font-semibold text-heading mb-4">🤖 AI分析</h3>
        {
          issueClassification ? (
            <ClassificationDetails
              classification={issueClassification}
              variant="detailed"
              showMetadata={true}
              showReasons={true}
              showKeywords={true}
              maxReasons={3}
            />
          ) : (
            <div class="space-y-3">
              <div class="flex items-center gap-2 text-sm text-muted">
                <span class="animate-spin">⏳</span>
                <span>分類結果を生成中...</span>
              </div>
              <div class="text-xs text-muted">
                <p>このIssueの内容を分析して、最適な分類と優先度を決定しています。</p>
              </div>
            </div>
          )
        }
      </div>

      <!-- Issue Metadata -->
      <div class="card">
        <h3 class="text-lg font-semibold text-heading mb-4">Details</h3>
        <div class="space-y-3">
          <div>
            <span class="text-sm font-medium text-heading">Assignees:</span>
            <p class="text-sm text-muted">
              {
                currentIssue.assignees && currentIssue.assignees.length > 0
                  ? currentIssue.assignees.map(a => `@${a.login}`).join(', ')
                  : 'None'
              }
            </p>
          </div>
          <div>
            <span class="text-sm font-medium text-heading">Milestone:</span>
            <p class="text-sm text-muted">
              {currentIssue.milestone ? currentIssue.milestone.title : 'None'}
            </p>
          </div>
          <div>
            <span class="text-sm font-medium text-heading">Created:</span>
            <p class="text-sm text-muted">
              {new Date(currentIssue.created_at).toLocaleDateString('ja-JP')}
            </p>
          </div>
          <div>
            <span class="text-sm font-medium text-heading">Updated:</span>
            <p class="text-sm text-muted">
              {new Date(currentIssue.updated_at).toLocaleDateString('ja-JP')}
            </p>
          </div>
          {
            currentIssue.closed_at && (
              <div>
                <span class="text-sm font-medium text-heading">Closed:</span>
                <p class="text-sm text-muted">
                  {new Date(currentIssue.closed_at).toLocaleDateString('ja-JP')}
                </p>
              </div>
            )
          }
        </div>
      </div>

      <!-- Related Issues -->
      <div class="card">
        <h3 class="text-lg font-semibold text-heading mb-4">Related Issues</h3>
        <div class="space-y-2">
          <a
            href={resolveUrl('/issues/123')}
            class="block text-sm text-primary-600 hover:text-primary-700"
          >
            #123 Similar issue
          </a>
          <a
            href={resolveUrl('/issues/456')}
            class="block text-sm text-primary-600 hover:text-primary-700"
          >
            #456 Related feature request
          </a>
        </div>
      </div>
    </div>
  </div>
</PageLayout>
