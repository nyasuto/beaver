---
/**
 * Dashboard Layout Component
 *
 * Layout for dashboard pages with sidebar navigation and main content area.
 * Optimized for analytics and data-heavy interfaces.
 */

import BaseLayout from './BaseLayout.astro';
import Header from '../navigation/Header.astro';
import Footer from '../navigation/Footer.astro';
import Breadcrumb, { type BreadcrumbItem } from '../navigation/Breadcrumb.astro';

export interface SidebarItem {
  name: string;
  href: string;
  icon?: string;
  current?: boolean;
  badge?: string | number;
  children?: SidebarItem[];
}

export interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  author?: string;
  ogImage?: string;
  ogType?: 'website' | 'article' | 'profile';
  canonical?: string;
  noindex?: boolean;
  lang?: string;

  // Layout specific props
  showHeader?: boolean;
  showFooter?: boolean;
  showSearch?: boolean;
  headerFixed?: boolean;

  // Sidebar props
  sidebarItems?: SidebarItem[];
  sidebarCollapsed?: boolean;
  sidebarFixed?: boolean;

  // Breadcrumb props
  breadcrumbs?: BreadcrumbItem[];
  breadcrumbSeparator?: 'slash' | 'chevron' | 'arrow';

  // Content props
  contentPadding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';

  // Classes
  class?: string;
  headerClass?: string;
  sidebarClass?: string;
  mainClass?: string;
  footerClass?: string;
}

const {
  title,
  description,
  keywords,
  author,
  ogImage,
  ogType,
  canonical,
  noindex,
  lang,

  showHeader = true,
  showFooter = false,
  showSearch = true,
  headerFixed = true,

  sidebarItems = [],
  sidebarCollapsed = false,
  sidebarFixed = true,

  breadcrumbs,
  breadcrumbSeparator = 'chevron',

  contentPadding = 'lg',

  class: className = '',
  headerClass = '',
  sidebarClass = '',
  mainClass = '',
  footerClass = '',
} = Astro.props;

// Default sidebar items for analytics dashboard
const defaultSidebarItems: SidebarItem[] = [
  {
    name: '概要',
    href: '/analytics',
    icon: 'dashboard',
    current: Astro.url.pathname === '/analytics',
  },
  {
    name: 'Issue',
    href: '/analytics/issues',
    icon: 'bug',
    current: Astro.url.pathname.startsWith('/analytics/issues'),
  },
  {
    name: 'パフォーマンス',
    href: '/analytics/performance',
    icon: 'chart',
    current: Astro.url.pathname.startsWith('/analytics/performance'),
  },
  {
    name: 'レポート',
    href: '/analytics/reports',
    icon: 'document',
    current: Astro.url.pathname.startsWith('/analytics/reports'),
  },
  {
    name: '設定',
    href: '/analytics/settings',
    icon: 'cog',
    current: Astro.url.pathname.startsWith('/analytics/settings'),
  },
];

const finalSidebarItems = sidebarItems.length > 0 ? sidebarItems : defaultSidebarItems;

// Content padding classes
const paddingClasses = {
  none: 'p-0',
  sm: 'p-4',
  md: 'p-6',
  lg: 'p-8',
  xl: 'p-12',
};

const sidebarWidth = sidebarCollapsed ? 'w-16' : 'w-64';
const mainMargin = sidebarFixed ? (sidebarCollapsed ? 'ml-16' : 'ml-64') : 'ml-0';
const topMargin = headerFixed ? 'mt-16' : 'mt-0';

// Create props object for BaseLayout
const baseLayoutProps = {
  title,
  description,
  keywords,
  author,
  ogImage,
  ogType,
  canonical,
  noindex,
  lang,
  class: className,
  bodyClass: 'bg-gray-50 dark:bg-gray-900',
};
---

<BaseLayout {...baseLayoutProps}>
  {
    showHeader && (
      <Header
        currentPath={Astro.url.pathname}
        showSearch={showSearch}
        fixed={headerFixed}
        class={headerClass}
      />
    )
  }

  <div class={`flex ${topMargin}`}>
    {/* Sidebar */}
    <aside
      class={`${sidebarWidth} ${sidebarFixed ? 'fixed left-0 top-0' : ''} ${headerFixed ? 'mt-16' : ''} h-screen bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto transition-all duration-300 ${sidebarClass}`}
      id="sidebar"
    >
      <div class="p-4">
        <nav class="space-y-2">
          {
            finalSidebarItems.map(item => (
              <a
                href={item.href}
                class={`flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200 ${
                  item.current
                    ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-300'
                    : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
                }`}
                aria-current={item.current ? 'page' : undefined}
              >
                {item.icon && (
                  <span class="flex-shrink-0">
                    {item.icon === 'dashboard' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6a2 2 0 01-2 2H10a2 2 0 01-2-2V5z"
                        />
                      </svg>
                    )}
                    {item.icon === 'bug' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    )}
                    {item.icon === 'chart' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                        />
                      </svg>
                    )}
                    {item.icon === 'document' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                        />
                      </svg>
                    )}
                    {item.icon === 'cog' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                      </svg>
                    )}
                  </span>
                )}
                {!sidebarCollapsed && <span class="flex-1">{item.name}</span>}
                {!sidebarCollapsed && item.badge && (
                  <span class="bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 text-xs px-2 py-1 rounded-full">
                    {item.badge}
                  </span>
                )}
              </a>
            ))
          }
        </nav>
      </div>

      {/* Sidebar toggle button */}
      <button
        id="sidebar-toggle"
        class="absolute top-4 -right-3 w-6 h-6 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full flex items-center justify-center hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
        aria-label="Toggle sidebar"
      >
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"
          ></path>
        </svg>
      </button>
    </aside>

    {/* Main content */}
    <main id="main-content" class={`flex-1 ${mainMargin} transition-all duration-300 ${mainClass}`}>
      {
        breadcrumbs && breadcrumbs.length > 1 && (
          <div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
            <div class="px-8 py-4">
              <Breadcrumb items={breadcrumbs} separator={breadcrumbSeparator} />
            </div>
          </div>
        )
      }

      <div class={paddingClasses[contentPadding]}>
        <slot />
      </div>
    </main>
  </div>

  {
    showFooter && (
      <Footer minimal={true} showSocial={false} showNewsletter={false} class={footerClass} />
    )
  }
</BaseLayout>

<script>
  // Sidebar toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.getElementById('main-content');

    if (sidebarToggle && sidebar && mainContent) {
      let isCollapsed = false;

      sidebarToggle.addEventListener('click', () => {
        isCollapsed = !isCollapsed;

        if (isCollapsed) {
          sidebar.classList.remove('w-64');
          sidebar.classList.add('w-16');
          mainContent.classList.remove('ml-64');
          mainContent.classList.add('ml-16');

          // Hide text in sidebar items
          const sidebarTexts = sidebar.querySelectorAll('nav a span:not(.flex-shrink-0)');
          sidebarTexts.forEach(text => {
            text.classList.add('hidden');
          });

          // Hide badges
          const badges = sidebar.querySelectorAll('nav a span:last-child');
          badges.forEach(badge => {
            if (badge.textContent && badge.textContent.trim()) {
              badge.classList.add('hidden');
            }
          });
        } else {
          sidebar.classList.remove('w-16');
          sidebar.classList.add('w-64');
          mainContent.classList.remove('ml-16');
          mainContent.classList.add('ml-64');

          // Show text in sidebar items
          const sidebarTexts = sidebar.querySelectorAll('nav a span:not(.flex-shrink-0)');
          sidebarTexts.forEach(text => {
            text.classList.remove('hidden');
          });

          // Show badges
          const badges = sidebar.querySelectorAll('nav a span:last-child');
          badges.forEach(badge => {
            if (badge.textContent && badge.textContent.trim()) {
              badge.classList.remove('hidden');
            }
          });
        }

        // Rotate toggle icon
        const toggleIcon = sidebarToggle.querySelector('svg');
        if (toggleIcon) {
          if (isCollapsed) {
            toggleIcon.style.transform = 'rotate(180deg)';
          } else {
            toggleIcon.style.transform = 'rotate(0deg)';
          }
        }
      });
    }
  });
</script>
