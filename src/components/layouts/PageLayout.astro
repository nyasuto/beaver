---
/**
 * Page Layout Component
 *
 * Complete page layout with HTML structure, SEO optimization, header, main content, and footer.
 * Includes navigation, responsive design, theme system, and accessibility features.
 */

import Header from '../navigation/Header.astro';
import Footer from '../navigation/Footer.astro';
import SkipLinks from '../accessibility/SkipLinks.astro';
import UpdateNotification from '../UpdateNotification.astro';
import Settings from '../Settings.astro';

// Import global styles
import '../../styles/global.css';

export interface Props {
  // SEO and meta props
  title?: string | undefined;
  description?: string | undefined;
  keywords?: string | undefined;
  author?: string | undefined;
  ogImage?: string | undefined;
  ogType?: 'website' | 'article' | 'profile' | undefined;
  canonical?: string | undefined;
  noindex?: boolean | undefined;
  lang?: string | undefined;

  // Layout specific props
  showHeader?: boolean;
  showFooter?: boolean;
  showSearch?: boolean;
  headerFixed?: boolean;
  headerTransparent?: boolean;

  // Content props
  maxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '4xl' | '6xl' | '7xl' | 'full';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';

  // Classes
  class?: string | undefined;
  bodyClass?: string | undefined;
  headerClass?: string;
  mainClass?: string;
  footerClass?: string;
}

const {
  title = 'Beaver Astro Edition',
  description = 'AI-first knowledge management system that transforms GitHub development activities into structured, persistent knowledge bases',
  keywords = 'astro, typescript, github, knowledge-management, ai-agents, analytics',
  author = 'Beaver Team',
  ogImage,
  ogType = 'website',
  canonical,
  noindex = false,
  lang = 'en',

  showHeader = true,
  showFooter = true,
  showSearch = false,
  headerFixed = false,
  headerTransparent = false,

  maxWidth = 'full',
  padding = 'md',

  class: className = '',
  bodyClass = '',
  headerClass = '',
  mainClass = '',
  footerClass = '',
} = Astro.props;

// Container classes based on maxWidth
const containerClasses = {
  sm: 'max-w-2xl',
  md: 'max-w-4xl',
  lg: 'max-w-6xl',
  xl: 'max-w-7xl',
  '2xl': 'max-w-screen-2xl',
  '4xl': 'max-w-screen-4xl',
  '6xl': 'max-w-screen-6xl',
  '7xl': 'max-w-screen-7xl',
  full: 'max-w-full',
};

// Padding classes
const paddingClasses = {
  none: 'p-0',
  sm: 'p-4',
  md: 'px-4 py-8 sm:px-6 lg:px-8',
  lg: 'px-4 py-12 sm:px-6 lg:px-8',
  xl: 'px-4 py-16 sm:px-6 lg:px-8',
};

// SEO and meta configuration
const baseUrl = import.meta.env.BASE_URL || '/beaver';
const siteUrl = `https://nyasuto.github.io${baseUrl}`;
const fullTitle = title.includes('Beaver') ? title : `${title} | Beaver Astro Edition`;
const canonicalUrl = canonical || new URL(Astro.url.pathname, Astro.site).href;
const ogImageUrl = ogImage || `${siteUrl}/og-image.png`;

// Layout classes
const containerClass = `container mx-auto ${containerClasses[maxWidth]} ${paddingClasses[padding]}`;
const mainClasses = `flex-1 ${headerFixed ? 'pt-16' : ''} ${mainClass}`;
const bodyClasses = `min-h-screen flex flex-col antialiased transition-colors duration-200 ${bodyClass}`;
---

<!doctype html>
<html lang={lang} class={className}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    {/* Primary Meta Tags */}
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <meta name="keywords" content={keywords} />

    {/* Canonical URL */}
    <link rel="canonical" href={canonicalUrl} />

    {/* Favicon */}
    <link rel="icon" href={`${import.meta.env.BASE_URL}/favicon.png`} />
    <link rel="manifest" href={`${import.meta.env.BASE_URL}/site.webmanifest`} />

    {/* Robots */}
    {noindex && <meta name="robots" content="noindex, nofollow" />}

    {/* Open Graph / Facebook */}
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:site_name" content="Beaver Astro Edition" />

    {/* Twitter */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalUrl} />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImageUrl} />

    {/* Fonts */}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap"
      rel="stylesheet"
    />

    {/* Theme Script (runs before body to prevent flash) */}
    <script>
      // Initialize theme
      const theme = localStorage.getItem('theme') || 'system';
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light';
      const activeTheme = theme === 'system' ? systemTheme : theme;

      if (activeTheme === 'dark') {
        document.documentElement.classList.add('dark');
        document.documentElement.setAttribute('data-theme', 'dark');
      } else {
        document.documentElement.classList.remove('dark');
        document.documentElement.setAttribute('data-theme', 'light');
      }
    </script>

    {/* Structured Data */}
    <script type="application/ld+json" is:inline>
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Beaver Astro Edition",
        "description": "AI-first knowledge management system that transforms GitHub development activities into structured, persistent knowledge bases",
        "url": "${siteUrl}",
        "author": {
          "@type": "Organization",
          "name": "Beaver Team"
        },
        "potentialAction": {
          "@type": "SearchAction",
          "target": "${siteUrl}/search?q={search_term_string}",
          "query-input": "required name=search_term_string"
        }
      }
    </script>
  </head>
  <body class={bodyClasses}>
    {/* Skip Links for accessibility */}
    <SkipLinks />

    {/* Version Update Notification */}
    <UpdateNotification
      isVisible={false}
      autoHide={0}
      position="top"
      animation="slide"
      variant="info"
      showVersionDetails={true}
    />

    {/* Header */}
    {
      showHeader && (
        <Header
          currentPath={Astro.url.pathname}
          showSearch={showSearch}
          fixed={headerFixed}
          transparent={headerTransparent}
          class={headerClass}
        />
      )
    }

    {/* Main Content */}
    <main id="main-content" class={mainClasses}>
      <div class={containerClass}>
        <slot />
      </div>
    </main>

    {/* Footer */}
    {showFooter && <Footer class={footerClass} />}

    {/* Settings Panel */}
    <Settings isOpen={false} position="right" size="md" modal={true} title="設定" />

    {/* Back to top button */}
    <button
      id="back-to-top"
      class="fixed bottom-4 right-4 bg-primary-600 text-white p-3 rounded-full shadow-lg hover:bg-primary-700 transition-all duration-200 opacity-0 invisible focus-visible z-40"
      aria-label="Back to top"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>

    {/* Theme toggle and back to top functionality */}
    <script>
      // Back to top button functionality
      const backToTopButton = document.getElementById('back-to-top');

      if (backToTopButton) {
        // Show/hide back to top button based on scroll position
        window.addEventListener('scroll', () => {
          if (window.scrollY > 300) {
            backToTopButton.classList.remove('opacity-0', 'invisible');
            backToTopButton.classList.add('opacity-100', 'visible');
          } else {
            backToTopButton.classList.add('opacity-0', 'invisible');
            backToTopButton.classList.remove('opacity-100', 'visible');
          }
        });

        // Scroll to top when clicked
        backToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' });
        });
      }

      // Theme toggle functionality
      (window as typeof window & { toggleTheme: () => void }).toggleTheme = function () {
        const currentTheme = localStorage.getItem('theme') || 'system';
        const newTheme =
          currentTheme === 'light' ? 'dark' : currentTheme === 'dark' ? 'system' : 'light';

        localStorage.setItem('theme', newTheme);

        const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
          ? 'dark'
          : 'light';
        const activeTheme = newTheme === 'system' ? systemTheme : newTheme;

        if (activeTheme === 'dark') {
          document.documentElement.classList.add('dark');
          document.documentElement.setAttribute('data-theme', 'dark');
        } else {
          document.documentElement.classList.remove('dark');
          document.documentElement.setAttribute('data-theme', 'light');
        }

        // Dispatch custom event for theme change
        window.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: newTheme } }));
      };

      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
        const currentTheme = localStorage.getItem('theme') || 'system';
        if (currentTheme === 'system') {
          if (e.matches) {
            document.documentElement.classList.add('dark');
            document.documentElement.setAttribute('data-theme', 'dark');
          } else {
            document.documentElement.classList.remove('dark');
            document.documentElement.setAttribute('data-theme', 'light');
          }
        }
      });

      // Initialize user settings, version checker, and PWA system
      setTimeout(() => {
        initializeUserSystemsIntegration();
      }, 1000);

      async function initializeUserSystemsIntegration() {
        try {
          // Initialize user settings manager
          const { createSettingsManager } = await import('../../lib/settings.js');
          const settingsManager = createSettingsManager();

          // Initialize PWA system if supported
          try {
            const { initializePWA } = await import('../../lib/pwa-init.js');
            const pwaSettings = settingsManager.getPWASettings();

            if (pwaSettings.enabled) {
              await initializePWA({
                enabled: true,
                scope: '/beaver/',
                versionCheckInterval: settingsManager.getVersionCheckSettings().interval,
                debug: pwaSettings.debugMode,
                autoRegister: true,
              });
              console.log('🚀 PWA System initialized');
            }
          } catch (error) {
            console.warn('⚠️ PWA initialization failed:', error);
          }

          // Initialize browser notification manager
          const { createBrowserNotificationManager } = await import('../../lib/notifications.js');
          const settings = settingsManager.getSettings();

          // Safely access browser settings with fallbacks
          const browserSettings = settings.notifications.browser || {
            enabled: false,
            autoRequestPermission: false,
            onlyWhenHidden: true,
            maxConcurrent: 3,
          };

          const browserNotificationManager = createBrowserNotificationManager({
            enabled: browserSettings.enabled,
            autoRequestPermission: browserSettings.autoRequestPermission,
            onlyWhenHidden: browserSettings.onlyWhenHidden,
            maxConcurrent: browserSettings.maxConcurrent,
          });

          // Initialize version checker with settings
          const { createVersionChecker } = await import('../../lib/version-checker.js');

          const versionChecker = createVersionChecker({
            versionUrl: '/beaver/version.json',
            enabled: settings.versionCheck.enabled,
            checkInterval: settings.versionCheck.interval,
            maxRetries: settings.versionCheck.maxRetries,
          });

          // Only start version checking if PWA is not handling updates
          let shouldStartVersionChecker = settings.versionCheck.enabled;

          // Listen for PWA disable signal
          document.addEventListener('pwa:disable-version-polling', () => {
            if (shouldStartVersionChecker) {
              console.log('🔄 PWA active - skipping manual version polling');
              shouldStartVersionChecker = false;
              versionChecker.stop();
            }
          });

          // Start version checking if enabled and PWA hasn't disabled it
          if (shouldStartVersionChecker) {
            versionChecker.start();
          }

          // Listen for settings changes
          document.addEventListener('settings:version-check-toggled', (e: Event) => {
            const customEvent = e as CustomEvent;
            const { enabled } = customEvent.detail;

            if (enabled) {
              versionChecker.updateConfig({ enabled: true });
              versionChecker.start();
              console.log('🔄 Version checking enabled');
            } else {
              versionChecker.stop();
              versionChecker.updateConfig({ enabled: false });
              console.log('🔄 Version checking disabled');
            }
          });

          // Listen for notification settings changes
          document.addEventListener('settings:notifications-toggled', (e: Event) => {
            const customEvent = e as CustomEvent;
            const { enabled } = customEvent.detail;
            console.log(`🔔 Notifications ${enabled ? 'enabled' : 'disabled'}`);
          });

          // Listen for version update events
          document.addEventListener('version:update-available', (e: Event) => {
            const customEvent = e as CustomEvent;
            const notificationSettings = settingsManager.getNotificationSettings();

            if (notificationSettings.enabled) {
              // Try browser notification first if enabled
              if (notificationSettings.browser.enabled && browserNotificationManager) {
                browserNotificationManager
                  .show({
                    title: '新しいバージョンが利用可能です',
                    body: `Beaver Astro Editionの新しいバージョン ${customEvent.detail.latestVersion?.version || ''} が利用可能になりました。`,
                    icon: '/beaver/favicon.png',
                    tag: 'version-update',
                    requireInteraction: false,
                    autoClose: 10000,
                    data: {
                      currentVersion: customEvent.detail.currentVersion,
                      latestVersion: customEvent.detail.latestVersion,
                    },
                  })
                  .then(result => {
                    // If browser notification failed, fall back to in-page notification
                    if (!result.success) {
                      showInPageNotification(customEvent, notificationSettings);
                    }
                  });
              } else {
                // Show in-page notification directly
                showInPageNotification(customEvent, notificationSettings);
              }
            }
          });

          function showInPageNotification(customEvent: CustomEvent, notificationSettings: any) {
            const updateNotification = document.querySelector(
              '[data-component="update-notification"]'
            );
            if (updateNotification) {
              const showEvent = new CustomEvent('notification:show', {
                detail: {
                  currentVersion: customEvent.detail.currentVersion,
                  latestVersion: customEvent.detail.latestVersion,
                  position: notificationSettings.position,
                  animation: notificationSettings.animation,
                  showVersionDetails: notificationSettings.showVersionDetails,
                  autoHide: notificationSettings.autoHide,
                },
              });
              updateNotification.dispatchEvent(showEvent);
            }
          }

          // Listen for browser notification fallback events
          document.addEventListener('browserNotification:fallback', (e: Event) => {
            const customEvent = e as CustomEvent;
            const { options, reason } = customEvent.detail;

            console.warn('Browser notification fallback triggered:', reason);

            // If this was a version update notification, show in-page notification
            if (options.tag === 'version-update' && options.data) {
              const notificationSettings = settingsManager.getNotificationSettings();
              const mockEvent = new CustomEvent('version:update-available', {
                detail: options.data,
              });
              showInPageNotification(mockEvent, notificationSettings);
            }
          });

          // Handle Page Visibility API for performance optimization
          if (settings.versionCheck.checkOnlyWhenVisible) {
            document.addEventListener('visibilitychange', () => {
              if (document.hidden) {
                versionChecker.stop();
              } else if (settings.versionCheck.enabled) {
                versionChecker.start();
              }
            });
          }

          // Expose controls globally for debugging and external use
          (window as any).beaverSystems = {
            settingsManager,
            versionChecker,
            browserNotificationManager,
            openSettings: () => {
              const settingsEvent = new CustomEvent('settings:open');
              document.dispatchEvent(settingsEvent);
            },
            checkVersion: () => versionChecker.checkVersion(),
            toggleNotifications: () => settingsManager.toggleNotifications(),
            toggleVersionCheck: () => settingsManager.toggleVersionCheck(),
            testBrowserNotification: () =>
              browserNotificationManager?.show({
                title: 'Beaver Test Notification',
                body: 'Browser notification system is working correctly!',
                icon: '/beaver/favicon.png',
                tag: 'test',
                requireInteraction: false,
                autoClose: 5000,
              }),
          };

          console.log('🔄 User systems integration initialized successfully');
        } catch (error) {
          console.error('Failed to initialize user systems:', error);

          // Fallback to simple version checking if module loading fails
          initializeFallbackVersionChecker();
        }
      }

      // Fallback version checker for non-PWA browsers
      function initializeFallbackVersionChecker() {
        // Check if PWA/Service Worker is available
        if ('serviceWorker' in navigator) {
          console.log('🚀 PWA available - using native Service Worker updates');
          return; // Skip fallback when PWA is available
        }

        console.log('📱 Non-PWA browser detected - using fallback version checker');

        let currentVersion: any = null;
        let checkInterval: NodeJS.Timeout | null = null;

        async function checkForUpdates() {
          try {
            const baseUrl = window.location.pathname.includes('/beaver')
              ? window.location.origin + '/beaver'
              : window.location.origin;

            const response = await fetch(`${baseUrl}/version.json?t=${Date.now()}`);
            const latestVersion = await response.json();

            if (currentVersion === null) {
              currentVersion = latestVersion;
              console.log('🔄 Initial version loaded (fallback):', latestVersion.version);
              return;
            }

            // Check if version has changed
            if (
              currentVersion.buildId !== latestVersion.buildId ||
              currentVersion.gitCommit !== latestVersion.gitCommit ||
              currentVersion.dataHash !== latestVersion.dataHash
            ) {
              console.log('🔄 New version detected! (fallback)', {
                current: currentVersion.version,
                latest: latestVersion.version,
              });

              const updateEvent = new CustomEvent('version:update-available', {
                detail: {
                  currentVersion: currentVersion,
                  latestVersion: latestVersion,
                  updateType: 'manual-check',
                },
              });
              document.dispatchEvent(updateEvent);

              currentVersion = latestVersion;
            }
          } catch (error) {
            console.warn('Version check failed (fallback):', error);
          }
        }

        checkForUpdates();
        checkInterval = setInterval(checkForUpdates, 30000);

        (window as any).autoReloadControl = {
          checkNow: checkForUpdates,
          stop: () => {
            if (checkInterval) {
              clearInterval(checkInterval);
              checkInterval = null;
            }
          },
          getCurrentVersion: () => currentVersion,
        };

        console.log('🔄 Fallback version checker initialized for non-PWA browser');
      }
    </script>
  </body>
</html>
