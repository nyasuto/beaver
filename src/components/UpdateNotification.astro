---
/**
 * UpdateNotification Component
 *
 * Displays a notification banner when a version update is detected.
 * Provides one-click reload functionality and smooth animations.
 * Integrates with the VersionChecker for automatic update detection.
 */
import { z } from 'zod';
import { BaseUIPropsSchema } from '../lib/schemas/ui';

// UpdateNotification props schema
export const UpdateNotificationPropsSchema = BaseUIPropsSchema.extend({
  /** Whether to show the notification */
  isVisible: z.boolean().default(false),
  /** Current version info */
  currentVersion: z.string().optional(),
  /** Latest version info */
  latestVersion: z.string().optional(),
  /** Position of the notification */
  position: z.enum(['top', 'bottom']).default('top'),
  /** Animation type */
  animation: z.enum(['slide', 'fade', 'bounce']).default('slide'),
  /** Auto-hide after milliseconds (0 = never) */
  autoHide: z.number().int().min(0).default(0),
  /** Custom message */
  message: z.string().optional(),
  /** Whether to show version details */
  showVersionDetails: z.boolean().default(true),
  /** Theme variant */
  variant: z.enum(['info', 'success', 'warning']).default('info'),
});

export type UpdateNotificationProps = z.infer<typeof UpdateNotificationPropsSchema>;

type Props = UpdateNotificationProps;

const {
  isVisible = false,
  currentVersion,
  latestVersion,
  position = 'top',
  animation = 'slide',
  autoHide = 0,
  message = '新しいバージョンが利用可能です',
  showVersionDetails = true,
  variant = 'info',
  className = '',
  id = 'update-notification',
  style,
  'data-testid': testId = 'update-notification',
  'aria-label': ariaLabel = '更新通知',
  ...rest
} = Astro.props;

// Validate props with Zod schema
try {
  UpdateNotificationPropsSchema.parse(Astro.props);
} catch (error) {
  console.warn('UpdateNotification props validation failed:', error);
}

// Enhanced base classes for the notification using Beaver design system
const baseClasses = [
  'fixed',
  'left-0',
  'right-0',
  'z-50',
  'p-responsive', // Mobile-first responsive padding
  'text-responsive-sm', // Responsive text sizing
  'font-medium',
  'shadow-strong', // Using Beaver shadow system
  'border-soft', // Using Beaver border utility
  'surface-overlay', // Using glassmorphism from design system
  'transition-smooth', // Using Beaver transition utility
].join(' ');

// Position-specific classes with enhanced positioning
const positionClasses = {
  top: 'top-0 border-b-2 border-primary-200 dark:border-primary-700',
  bottom: 'bottom-0 border-t-2 border-primary-200 dark:border-primary-700',
};

// Enhanced variant-specific classes using Beaver color system
const variantClasses = {
  info: [
    'bg-primary-50/95 border-primary-200 text-primary-800',
    'dark:bg-primary-900/30 dark:border-primary-700 dark:text-primary-200',
    'backdrop-blur-md', // Enhanced glassmorphism
  ].join(' '),
  success: [
    'bg-success-50/95 border-success-200 text-success-800',
    'dark:bg-success-900/30 dark:border-success-700 dark:text-success-200',
    'backdrop-blur-md',
  ].join(' '),
  warning: [
    'bg-warning-50/95 border-warning-200 text-warning-800',
    'dark:bg-warning-900/30 dark:border-warning-700 dark:text-warning-200',
    'backdrop-blur-md',
  ].join(' '),
};

// Construct final className
const notificationClasses = [
  baseClasses,
  positionClasses[position],
  variantClasses[variant],
  className,
]
  .filter(Boolean)
  .join(' ');

// Generate unique IDs
const notificationId = id || `update-notification-${Math.random().toString(36).substring(2, 11)}`;
const contentId = `${notificationId}-content`;
const actionsId = `${notificationId}-actions`;
---

<div
  id={notificationId}
  class={notificationClasses}
  style={`display: ${isVisible ? 'block' : 'none'}; ${style || ''}`}
  data-testid={testId}
  data-component="update-notification"
  data-position={position}
  data-animation={animation}
  data-auto-hide={autoHide}
  aria-label={ariaLabel}
  aria-live="polite"
  aria-atomic="true"
  role="alert"
  {...rest}
>
  <div
    class="container-mobile flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4"
  >
    <!-- Notification Content -->
    <div id={contentId} class="flex items-center space-inline-md flex-1 min-w-0">
      <!-- Icon -->
      <div class="flex-shrink-0">
        {
          variant === 'info' && (
            <svg
              class="icon icon-md text-primary-600 dark:text-primary-400"
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                clip-rule="evenodd"
              />
            </svg>
          )
        }
        {
          variant === 'success' && (
            <svg
              class="icon icon-md text-success-600 dark:text-success-400"
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clip-rule="evenodd"
              />
            </svg>
          )
        }
        {
          variant === 'warning' && (
            <svg
              class="icon icon-md text-warning-600 dark:text-warning-400"
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                clip-rule="evenodd"
              />
            </svg>
          )
        }
      </div>

      <!-- Message and Version Info -->
      <div class="flex-1 min-w-0 space-stack-xs">
        <p class="text-body font-semibold text-heading">
          {message}
        </p>
        {
          showVersionDetails && (currentVersion || latestVersion) && (
            <p class="text-body-small text-muted font-mono">
              {currentVersion && `現在: v${currentVersion}`}
              {currentVersion && latestVersion && ' → '}
              {latestVersion && `最新: v${latestVersion}`}
            </p>
          )
        }
      </div>
    </div>

    <!-- Action Buttons -->
    <div
      id={actionsId}
      class="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 sm:ml-4 gap-2 sm:gap-0"
    >
      <button
        type="button"
        class="btn btn-primary text-xs px-3 py-1.5 touch-target-sm"
        data-action="reload"
        aria-label="ページをリロードして更新を適用"
      >
        <span class="flex items-center space-inline-xs">
          <svg
            class="icon icon-xs"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
            ></path>
          </svg>
          <span>リロード</span>
        </span>
      </button>

      <button
        type="button"
        class="btn btn-ghost text-xs px-2 py-1.5 touch-target-sm"
        data-action="dismiss"
        aria-label="通知を閉じる"
      >
        後で
      </button>

      <button
        type="button"
        class="btn btn-ghost p-1 touch-target-sm"
        data-action="close"
        aria-label="通知を閉じる"
      >
        <svg
          class="icon icon-sm"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  // UpdateNotification functionality (client-side)

  // Import VersionChecker types for better type safety
  interface VersionInfo {
    version: string;
    timestamp: number;
    buildId: string;
    gitCommit: string;
    environment: 'development' | 'production' | 'staging';
    dataHash?: string;
  }

  interface UpdateNotificationController {
    show(currentVersion?: VersionInfo, latestVersion?: VersionInfo): void;
    hide(): void;
    setAutoHide(milliseconds: number): void;
    destroy(): void;
  }

  // Global controller instance
  let notificationController: UpdateNotificationController | null = null;

  document.addEventListener('DOMContentLoaded', () => {
    const notification = document.getElementById('update-notification');
    if (!notification) return;

    let autoHideTimer: number | null = null;

    // Create controller
    notificationController = {
      show(currentVersion?: VersionInfo, latestVersion?: VersionInfo): void {
        if (!notification) return;

        // Update version details if provided
        if (currentVersion || latestVersion) {
          updateVersionDisplay(currentVersion, latestVersion);
        }

        // Show notification with animation
        showNotification();

        // Set up auto-hide if configured
        const autoHide = parseInt(notification.getAttribute('data-auto-hide') || '0');
        if (autoHide > 0) {
          this.setAutoHide(autoHide);
        }
      },

      hide(): void {
        hideNotification();
      },

      setAutoHide(milliseconds: number): void {
        if (autoHideTimer) {
          clearTimeout(autoHideTimer);
        }
        autoHideTimer = window.setTimeout(() => {
          this.hide();
        }, milliseconds);
      },

      destroy(): void {
        if (autoHideTimer) {
          clearTimeout(autoHideTimer);
        }
        if (notification) {
          notification.remove();
        }
        notificationController = null;
      },
    };

    // Handle button clicks
    notification.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;

      // Find the button with data-action (traverse up the DOM tree)
      let actionElement = target;
      let action = actionElement.getAttribute('data-action');

      // Look up the DOM tree to find an element with data-action
      while (!action && actionElement && actionElement !== notification) {
        actionElement = actionElement.parentElement as HTMLElement;
        if (actionElement) {
          action = actionElement.getAttribute('data-action');
        }
      }

      switch (action) {
        case 'reload':
          e.preventDefault();
          e.stopPropagation();
          handleReload();
          break;
        case 'dismiss':
          e.preventDefault();
          e.stopPropagation();
          handleDismiss();
          break;
        case 'close':
          e.preventDefault();
          e.stopPropagation();
          handleClose();
          break;
      }
    });

    // Animation helper functions
    function showNotification(): void {
      if (!notification) return;

      const animationType = notification.getAttribute('data-animation') || 'slide';
      const position = notification.getAttribute('data-position') || 'top';

      notification.style.display = 'block';

      // Reset transform/opacity
      notification.style.transform = '';
      notification.style.opacity = '1';

      // Apply initial animation state
      switch (animationType) {
        case 'slide':
          notification.style.transform =
            position === 'top' ? 'translateY(-100%)' : 'translateY(100%)';
          break;
        case 'fade':
          notification.style.opacity = '0';
          break;
        case 'bounce':
          notification.style.transform = 'scale(0.95)';
          break;
      }

      // Trigger animation
      requestAnimationFrame(() => {
        notification.style.transform = '';
        notification.style.opacity = '1';
      });

      // Dispatch show event
      notification.dispatchEvent(
        new CustomEvent('notificationShow', {
          bubbles: true,
          detail: { notificationId: notification.id },
        })
      );
    }

    function hideNotification(): void {
      if (!notification) return;

      const animationType = notification.getAttribute('data-animation') || 'slide';
      const position = notification.getAttribute('data-position') || 'top';

      // Apply exit animation
      switch (animationType) {
        case 'slide':
          notification.style.transform =
            position === 'top' ? 'translateY(-100%)' : 'translateY(100%)';
          break;
        case 'fade':
          notification.style.opacity = '0';
          break;
        case 'bounce':
          notification.style.transform = 'scale(0.95)';
          break;
      }

      // Hide after animation
      setTimeout(() => {
        if (notification) {
          notification.style.display = 'none';
        }
      }, 300);

      // Dispatch hide event
      notification.dispatchEvent(
        new CustomEvent('notificationHide', {
          bubbles: true,
          detail: { notificationId: notification.id },
        })
      );
    }

    function updateVersionDisplay(currentVersion?: VersionInfo, latestVersion?: VersionInfo): void {
      const versionElement = notification?.querySelector('.text-xs.opacity-75');
      if (!versionElement) return;

      let versionText = '';
      if (currentVersion) {
        versionText += `現在: v${currentVersion.version}`;
      }
      if (currentVersion && latestVersion) {
        versionText += ' → ';
      }
      if (latestVersion) {
        versionText += `最新: v${latestVersion.version}`;
      }

      versionElement.textContent = versionText;
    }

    // Action handlers
    function handleReload(): void {
      // Show loading state
      const reloadButton = notification?.querySelector(
        '[data-action="reload"]'
      ) as HTMLButtonElement;
      if (reloadButton) {
        // Preserve button structure and update only the text span
        const textSpan = reloadButton.querySelector('span span');
        if (textSpan) {
          textSpan.textContent = 'リロード中...';
        } else {
          reloadButton.textContent = 'リロード中...';
        }
        reloadButton.disabled = true;
      }

      // Dispatch reload event before actual reload
      notification?.dispatchEvent(
        new CustomEvent('notificationReload', {
          bubbles: true,
          detail: { notificationId: notification?.id },
        })
      );

      // Handle PWA-specific update if available
      const windowWithPWA = window as any;
      if (windowWithPWA.pwaUpdateActions) {
        const { clearCaches, forceUpdate } = windowWithPWA.pwaUpdateActions;

        // Clear PWA caches first
        if (typeof clearCaches === 'function') {
          clearCaches();
        }

        // Force Service Worker update
        if (typeof forceUpdate === 'function') {
          forceUpdate();
        }

        // Clean up
        delete windowWithPWA.pwaUpdateActions;

        // Reload after PWA operations
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        // Regular reload for non-PWA updates
        setTimeout(() => {
          window.location.reload();
        }, 500);
      }
    }

    function handleDismiss(): void {
      // Hide notification and acknowledge update in VersionChecker
      hideNotification();

      // Try to acknowledge the update if VersionChecker is available
      try {
        const windowWithVersionChecker = window as any;
        // Try multiple paths to find the version checker
        let versionChecker = null;

        if (windowWithVersionChecker.beaverSystems?.versionChecker) {
          versionChecker = windowWithVersionChecker.beaverSystems.versionChecker;
        } else if (windowWithVersionChecker.versionChecker) {
          versionChecker = windowWithVersionChecker.versionChecker;
        } else if (windowWithVersionChecker.autoReloadControl) {
          // Fallback: manually clear the version update state
          console.log('Using fallback version control for acknowledgment');
        }

        if (versionChecker && typeof versionChecker.acknowledgeUpdate === 'function') {
          versionChecker.acknowledgeUpdate();
        }
      } catch (error) {
        console.warn('Could not acknowledge version update:', error);
      }

      // Dispatch dismiss event
      notification?.dispatchEvent(
        new CustomEvent('notificationDismiss', {
          bubbles: true,
          detail: { notificationId: notification?.id },
        })
      );
    }

    function handleClose(): void {
      hideNotification();

      // Dispatch close event
      notification?.dispatchEvent(
        new CustomEvent('notificationClose', {
          bubbles: true,
          detail: { notificationId: notification?.id },
        })
      );
    }

    // Listen for version checker events
    document.addEventListener('version:update-available', (e: Event) => {
      const customEvent = e as CustomEvent;
      if (notificationController) {
        notificationController.show(
          customEvent.detail.currentVersion,
          customEvent.detail.latestVersion
        );
      }
    });

    // Listen for PWA Service Worker update events
    document.addEventListener('pwa:sw-update-available', (e: Event) => {
      const customEvent = e as CustomEvent;
      if (notificationController) {
        // Show PWA-specific update notification
        const currentVersion = customEvent.detail.versionResult?.currentVersion;
        const latestVersion = customEvent.detail.versionResult?.latestVersion;

        notificationController.show(currentVersion, latestVersion);

        // Store PWA-specific actions for the reload handler
        (window as any).pwaUpdateActions = {
          clearCaches: customEvent.detail.clearCaches,
          forceUpdate: customEvent.detail.forceUpdate,
        };
      }
    });

    // Listen for notification:show events from settings system
    notification.addEventListener('notification:show', (e: Event) => {
      const customEvent = e as CustomEvent;
      const { currentVersion, latestVersion, position, animation, showVersionDetails, autoHide } =
        customEvent.detail;

      // Update notification attributes based on settings
      if (position) notification.setAttribute('data-position', position);
      if (animation) notification.setAttribute('data-animation', animation);
      if (autoHide !== undefined) notification.setAttribute('data-auto-hide', autoHide.toString());

      // Update version details visibility
      const versionDetailsElement = notification.querySelector(
        '.text-body-small.text-muted.font-mono'
      );
      if (versionDetailsElement) {
        (versionDetailsElement as HTMLElement).style.display = showVersionDetails
          ? 'block'
          : 'none';
      }

      if (notificationController) {
        notificationController.show(currentVersion, latestVersion);
      }
    });

    // Expose controller globally for external use
    (window as any).updateNotificationController = notificationController;
  });
</script>

<style>
  /* Enhanced notification animations using Beaver design system */
  #update-notification {
    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    will-change: transform, opacity;
  }

  /* Slide animations with improved easing */
  #update-notification[data-animation='slide'][data-position='top'] {
    transform: translateY(0);
    animation: slideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }

  #update-notification[data-animation='slide'][data-position='bottom'] {
    transform: translateY(0);
    animation: slideInFromBottom 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }

  /* Enhanced fade animation */
  #update-notification[data-animation='fade'] {
    opacity: 1;
    animation: fadeIn 0.3s ease-out;
  }

  /* Improved bounce animation */
  #update-notification[data-animation='bounce'] {
    transform: scale(1);
    animation: bounceIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  /* Custom keyframes for enhanced animations */
  @keyframes slideIn {
    0% {
      transform: translateY(-100%);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes slideInFromBottom {
    0% {
      transform: translateY(100%);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes bounceIn {
    0% {
      transform: scale(0.3);
      opacity: 0;
    }
    50% {
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Enhanced button interactions */
  #update-notification .btn {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  #update-notification .btn:hover {
    transform: translateY(-1px) scale(1.02);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  #update-notification .btn:active {
    transform: translateY(0) scale(0.98);
    transition-duration: 0.1s;
  }

  /* Loading state with spinner */
  #update-notification .btn[disabled] {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
    position: relative;
  }

  #update-notification .btn[disabled]::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    top: 50%;
    left: 50%;
    margin-left: -8px;
    margin-top: -8px;
    border: 2px solid transparent;
    border-top-color: currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Enhanced glassmorphism effect */
  #update-notification {
    backdrop-filter: blur(16px) saturate(1.8);
    -webkit-backdrop-filter: blur(16px) saturate(1.8);
  }

  /* Dark mode specific enhancements */
  .dark #update-notification {
    backdrop-filter: blur(20px) saturate(1.5);
    -webkit-backdrop-filter: blur(20px) saturate(1.5);
  }

  /* Mobile-specific optimizations */
  @media (max-width: 640px) {
    #update-notification {
      margin: 0 8px;
      border-radius: 12px;
      left: 8px;
      right: 8px;
      width: auto;
    }

    #update-notification .btn {
      min-height: 44px; /* Touch-friendly height */
      font-size: 14px;
    }
  }

  /* Reduced motion support with fallbacks */
  @media (prefers-reduced-motion: reduce) {
    #update-notification {
      transition: opacity 0.2s ease-in-out;
      animation: none !important;
    }

    #update-notification .btn:hover {
      transform: none;
      box-shadow: none;
    }

    #update-notification .btn:active {
      transform: none;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(0deg);
      }
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    #update-notification {
      border-width: 3px;
      backdrop-filter: none;
      background: var(--color-background) !important;
    }

    #update-notification .btn {
      border: 2px solid currentColor;
      background: transparent;
    }

    #update-notification .icon {
      stroke-width: 3;
    }
  }

  /* Focus management with enhanced visibility */
  #update-notification .btn:focus-visible {
    outline: 3px solid var(--color-primary);
    outline-offset: 2px;
    box-shadow: 0 0 0 6px rgba(37, 99, 235, 0.1);
  }

  /* Print styles - completely hide notification */
  @media print {
    #update-notification {
      display: none !important;
    }
  }

  /* RTL support */
  [dir='rtl'] #update-notification {
    left: auto;
    right: 0;
  }

  [dir='rtl'] #update-notification .space-inline-md > * + * {
    margin-left: 0;
    margin-right: 1rem;
  }

  /* Container queries for responsive design */
  @container (max-width: 400px) {
    #update-notification .btn span {
      display: none;
    }

    #update-notification .btn .icon {
      margin: 0;
    }
  }
</style>
