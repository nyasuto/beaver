---
/**
 * Statistics Card Component
 *
 * Displays key metrics for the dashboard with proper icons and formatting
 */

export interface Props {
  title: string;
  value: string | number;
  icon: string;
  description?: string;
  trend?: {
    direction: 'up' | 'down' | 'stable';
    value: string;
    period: string;
  };
  color?: 'blue' | 'green' | 'red' | 'yellow' | 'purple' | 'gray';
  size?: 'sm' | 'md' | 'lg';
  tooltip?: {
    enabled: boolean;
    content: Array<{
      number: number;
      title: string;
      priority: 'critical' | 'high';
      category: string;
      url: string;
      description?: string;
    }>;
  };
}

const {
  title,
  value,
  icon,
  description,
  trend,
  color = 'blue',
  size = 'md',
  tooltip,
} = Astro.props;

// Unique ID for tooltip
const tooltipId = `tooltip-${Math.random().toString(36).substr(2, 9)}`;

// Color classes based on selected theme
const colorClasses = {
  blue: 'text-blue-600 bg-blue-50 border-blue-100',
  green: 'text-green-600 bg-green-50 border-green-100',
  red: 'text-red-600 bg-red-50 border-red-100',
  yellow: 'text-yellow-600 bg-yellow-50 border-yellow-100',
  purple: 'text-purple-600 bg-purple-50 border-purple-100',
  gray: 'text-gray-600 bg-gray-50 border-gray-100',
};

// Size classes for different card sizes
const sizeClasses = {
  sm: 'p-4',
  md: 'p-6',
  lg: 'p-8',
};

// Trend icons
const trendIcons = {
  up: 'üìà',
  down: 'üìâ',
  stable: '‚û°Ô∏è',
};

// Trend colors
const trendColors = {
  up: 'text-green-600',
  down: 'text-red-600',
  stable: 'text-gray-600',
};
---

<div
  class={`card ${sizeClasses[size]} min-h-[120px] sm:min-h-[140px] ${tooltip?.enabled ? 'cursor-pointer relative' : ''}`}
  data-tooltip-target={tooltip?.enabled ? tooltipId : undefined}
>
  <div class="flex items-center justify-between h-full">
    <div class="flex items-center space-x-3 min-w-0 flex-1">
      <div class={`p-2 sm:p-3 rounded-lg ${colorClasses[color]} flex-shrink-0`}>
        <span class="text-lg sm:text-xl">{icon}</span>
      </div>
      <div class="min-w-0 flex-1">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">{title}</h3>
        <p class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white mt-1">
          {value === -1 ? 'N/A' : value}
        </p>
        {
          description && (
            <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-300 mt-1 truncate">
              {description}
            </p>
          )
        }
      </div>
    </div>

    {
      trend && (
        <div class="flex items-center space-x-1 ml-2 flex-shrink-0">
          <span class="text-sm">{trendIcons[trend.direction]}</span>
          <span class={`text-sm font-medium ${trendColors[trend.direction]}`}>{trend.value}</span>
          <span class="text-xs text-gray-500 dark:text-gray-400 hidden sm:inline">
            {trend.period}
          </span>
        </div>
      )
    }
  </div>

  {/* Tooltip Content */}
  {
    tooltip?.enabled && tooltip.content.length > 0 && (
      <div
        id={tooltipId}
        class="absolute left-1/2 transform -translate-x-1/2 bottom-full mb-2 hidden z-50 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4 w-80 max-w-sm"
        role="tooltip"
      >
        <div class="space-y-3">
          <div class="flex items-center justify-between border-b border-gray-200 dark:border-gray-700 pb-2">
            <h4 class="font-semibold text-gray-900 dark:text-white">Á∑äÊÄ•IssueË©≥Á¥∞</h4>
            <span class="text-sm text-gray-500 dark:text-gray-400">{tooltip.content.length}‰ª∂</span>
          </div>

          <div class="space-y-2 max-h-60 overflow-y-auto">
            {tooltip.content.map(issue => (
              <div class="border-l-2 border-red-400 pl-3 py-1">
                <div class="flex items-start justify-between">
                  <div class="min-w-0 flex-1">
                    <a
                      href={issue.url}
                      class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:underline block truncate"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      #{issue.number} {issue.title}
                    </a>
                    <div class="flex items-center gap-2 mt-1">
                      <span
                        class={`text-xs px-2 py-0.5 rounded-full font-medium ${
                          issue.priority === 'critical'
                            ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                            : 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
                        }`}
                      >
                        {issue.priority === 'critical' ? 'üî¥ Á∑äÊÄ•' : 'üü† È´ò'}
                      </span>
                      <span class="text-xs text-gray-600 dark:text-gray-400">{issue.category}</span>
                    </div>
                    {issue.description && (
                      <p class="text-xs text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">
                        {issue.description}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {tooltip.content.length >= 10 && (
            <div class="text-xs text-gray-500 dark:text-gray-400 text-center pt-2 border-t border-gray-200 dark:border-gray-700">
              „Åï„Çâ„Å´Á∑äÊÄ•Issue„Åå„ÅÇ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
            </div>
          )}
        </div>

        {/* Tooltip Arrow */}
        <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white dark:border-t-gray-800" />
      </div>
    )
  }
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Tooltip hover animations */
  [data-tooltip-target]:hover + div[role='tooltip'],
  [data-tooltip-target]:focus + div[role='tooltip'] {
    display: block !important;
  }

  /* Smooth transitions */
  div[role='tooltip'] {
    transition:
      opacity 0.2s ease-in-out,
      transform 0.2s ease-in-out;
  }
</style>

<script>
  // Enhanced tooltip functionality
  document.addEventListener('DOMContentLoaded', function () {
    const tooltipTriggers = document.querySelectorAll('[data-tooltip-target]');

    tooltipTriggers.forEach(trigger => {
      const tooltipId = trigger.getAttribute('data-tooltip-target');
      const tooltip = document.getElementById(tooltipId!);

      if (!tooltip) return;

      let hideTimeout: NodeJS.Timeout;

      // Show tooltip on hover
      const showTooltip = () => {
        clearTimeout(hideTimeout);
        tooltip.classList.remove('hidden');
        tooltip.style.opacity = '1';
      };

      // Hide tooltip with delay
      const hideTooltip = () => {
        hideTimeout = setTimeout(() => {
          tooltip.classList.add('hidden');
          tooltip.style.opacity = '0';
        }, 150);
      };

      // Event listeners for trigger
      trigger.addEventListener('mouseenter', showTooltip);
      trigger.addEventListener('mouseleave', hideTooltip);
      trigger.addEventListener('focus', showTooltip);
      trigger.addEventListener('blur', hideTooltip);

      // Event listeners for tooltip (to keep it visible when hovering over it)
      tooltip.addEventListener('mouseenter', () => clearTimeout(hideTimeout));
      tooltip.addEventListener('mouseleave', hideTooltip);
    });
  });
</script>
