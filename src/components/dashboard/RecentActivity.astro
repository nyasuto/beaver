---
/**
 * Recent Activity Component
 *
 * Displays recent issue activity and commit information
 * Using unified StatsService for consistent data across components
 */

import { formatDistanceToNow } from 'date-fns';
import { getStatsService } from '../../lib/services/StatsService';
import { resolveUrl } from '../../lib/utils/url';

// Get unified statistics using the StatsService
const statsService = getStatsService();
const statsResult = await statsService.getUnifiedStats({
  includeRecentActivity: true,
  includePriorityBreakdown: true,
  includeLabels: true,
  recentDays: 7,
  maxRecentItems: 5,
});

// Extract data from unified stats
const stats = statsResult.success ? statsResult.data : null;

// Fetch repository data separately (as it's not part of unified stats)
const fetchRepositoryData = async () => {
  try {
    const response = await fetch(
      `${Astro.site?.origin || 'http://localhost:4321'}/api/github/repository?include_stats=true`
    );

    if (response.ok) {
      const result = await response.json();
      if (result.success) {
        return {
          success: true,
          data: {
            repository: result.data?.repository || null,
            lastPush: result.data?.repository?.pushed_at || null,
          },
        };
      }
    }
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('Failed to fetch repository data:', error);
  }

  return {
    success: false,
    data: {
      repository: null,
      lastPush: null,
    },
  };
};

const repoResult = await fetchRepositoryData();

// Helper function to get issue icon based on state and labels
const getIssueIcon = (issue: any) => {
  if (issue.state === 'closed') return 'âœ…';
  if (issue.pull_request) return 'ðŸ”„';

  // Check for priority labels
  const labels = issue.labels || [];
  const priorityLabel = labels.find(
    (label: any) => label.name && label.name.startsWith('priority:')
  );

  if (priorityLabel) {
    const priority = priorityLabel.name.split(':')[1]?.trim();
    switch (priority) {
      case 'critical':
        return 'ðŸš¨';
      case 'high':
        return 'ðŸ”´';
      case 'medium':
        return 'ðŸŸ¡';
      case 'low':
        return 'ðŸŸ¢';
      default:
        return 'ðŸ“„';
    }
  }

  return 'ðŸ“„';
};

// Helper function to get relative time
const getRelativeTime = (dateString: string) => {
  try {
    return formatDistanceToNow(new Date(dateString), { addSuffix: true });
  } catch {
    return 'recently';
  }
};

// Get recent issues from unified stats
const recentIssues = stats?.recentActivity.recentlyUpdated || [];

// Export interface for type checking
export interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`space-y-6 ${className}`}>
  <!-- Recent Issues Activity -->
  <div class="card">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Recent Issues</h3>
      <a
        href={resolveUrl('/issues')}
        class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
      >
        View all â†’
      </a>
    </div>

    <div class="space-y-3">
      {
        recentIssues.length > 0 ? (
          recentIssues.map((issue: any) => (
            <div class="flex items-start space-x-3 p-3 border border-gray-100 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
              <span class="text-lg mt-0.5">{getIssueIcon(issue)}</span>
              <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between">
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-gray-900 dark:text-white truncate">
                      {issue.title}
                    </p>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      #{issue.number} â€¢ {issue.state} â€¢ {getRelativeTime(issue.updated_at)}
                    </p>
                  </div>
                  <div class="flex items-center space-x-1 ml-2">
                    {issue.labels?.slice(0, 1).map((label: any) => (
                      <span
                        class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                        style={`background-color: #${label.color}20; color: #${label.color};`}
                      >
                        {label.name}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div class="text-center py-8 text-gray-500 dark:text-gray-400">
            <span class="text-2xl block mb-2">ðŸ“­</span>
            <p class="text-sm">No recent issues found</p>
          </div>
        )
      }
    </div>
  </div>
</div>

<!-- Simplified Status -->
{
  (!statsResult.success || !repoResult.success) && (
    <div class="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
      <p class="text-sm text-yellow-700 dark:text-yellow-300">
        Data may be limited.{' '}
        <a href="/api/github/health" class="underline hover:no-underline">
          Check API status
        </a>
      </p>
    </div>
  )
}
