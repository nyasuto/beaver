---
/**
 * Recent Activity Component
 *
 * Displays recent issue activity and commit information
 */

import { formatDistanceToNow } from 'date-fns';

// Fetch recent activity data
const fetchRecentActivity = async () => {
  try {
    const [issuesResponse, repoResponse] = await Promise.all([
      fetch(
        `${Astro.site?.origin || 'http://localhost:4321'}/api/github/issues?state=all&sort=updated&per_page=10`
      ),
      fetch(
        `${Astro.site?.origin || 'http://localhost:4321'}/api/github/repository?include_stats=true`
      ),
    ]);

    const issuesData = issuesResponse.ok ? await issuesResponse.json() : null;
    const repoData = repoResponse.ok ? await repoResponse.json() : null;

    return {
      success: issuesData?.success && repoData?.success,
      data: {
        issues: issuesData?.data?.issues || [],
        repository: repoData?.data?.repository || null,
        lastPush: repoData?.data?.repository?.pushed_at || null,
      },
    };
  } catch (error) {
    console.error('Failed to fetch recent activity:', error);
    return {
      success: false,
      data: {
        issues: [],
        repository: null,
        lastPush: null,
      },
    };
  }
};

const activityResult = await fetchRecentActivity();
const { issues, repository, lastPush } = activityResult.data;

// Helper function to get issue icon based on state and labels
const getIssueIcon = (issue: any) => {
  if (issue.state === 'closed') return 'âœ…';
  if (issue.pull_request) return 'ðŸ”„';

  // Check for priority labels
  const labels = issue.labels || [];
  const priorityLabel = labels.find(
    (label: any) => label.name && label.name.startsWith('priority:')
  );

  if (priorityLabel) {
    const priority = priorityLabel.name.split(':')[1]?.trim();
    switch (priority) {
      case 'critical':
        return 'ðŸš¨';
      case 'high':
        return 'ðŸ”´';
      case 'medium':
        return 'ðŸŸ¡';
      case 'low':
        return 'ðŸŸ¢';
      default:
        return 'ðŸ“„';
    }
  }

  return 'ðŸ“„';
};

// Helper function to get relative time
const getRelativeTime = (dateString: string) => {
  try {
    return formatDistanceToNow(new Date(dateString), { addSuffix: true });
  } catch {
    return 'recently';
  }
};

// Get recent issues (last 5)
const recentIssues = issues.slice(0, 5);

// Export interface for type checking
export interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`space-y-6 ${className}`}>
  <!-- Recent Issues Activity -->
  <div class="card">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Recent Issues</h3>
      <a
        href="/issues"
        class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
      >
        View all â†’
      </a>
    </div>

    <div class="space-y-3">
      {
        recentIssues.length > 0 ? (
          recentIssues.map((issue: any) => (
            <div class="flex items-start space-x-3 p-3 border border-gray-100 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
              <span class="text-lg mt-0.5">{getIssueIcon(issue)}</span>
              <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between">
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-gray-900 dark:text-white truncate">
                      {issue.title}
                    </p>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      #{issue.number} â€¢ {issue.state} â€¢ {getRelativeTime(issue.updated_at)}
                    </p>
                  </div>
                  <div class="flex items-center space-x-1 ml-2">
                    {issue.labels?.slice(0, 2).map((label: any) => (
                      <span
                        class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                        style={`background-color: #${label.color}20; color: #${label.color};`}
                      >
                        {label.name}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div class="text-center py-8 text-gray-500 dark:text-gray-400">
            <span class="text-2xl block mb-2">ðŸ“­</span>
            <p class="text-sm">No recent issues found</p>
          </div>
        )
      }
    </div>
  </div>

  <!-- Repository Activity -->
  <div class="card">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Repository Activity</h3>
      <a
        href="/analytics"
        class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
      >
        View analytics â†’
      </a>
    </div>

    <div class="space-y-3">
      {
        repository && (
          <div class="flex items-center space-x-3 p-3 border border-gray-100 dark:border-gray-700 rounded-lg">
            <span class="text-lg">ðŸ“‚</span>
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-900 dark:text-white">Repository Health</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">
                {repository.stargazers_count} stars â€¢ {repository.forks_count} forks â€¢{' '}
                {repository.open_issues_count} open issues
              </p>
            </div>
          </div>
        )
      }

      {
        lastPush && (
          <div class="flex items-center space-x-3 p-3 border border-gray-100 dark:border-gray-700 rounded-lg">
            <span class="text-lg">ðŸ“¤</span>
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-900 dark:text-white">Latest Push</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">{getRelativeTime(lastPush)}</p>
            </div>
          </div>
        )
      }

      <!-- Weekly Summary -->
      <div
        class="flex items-center space-x-3 p-3 border border-gray-100 dark:border-gray-700 rounded-lg"
      >
        <span class="text-lg">ðŸ“Š</span>
        <div class="flex-1">
          <p class="text-sm font-medium text-gray-900 dark:text-white">This Week</p>
          <p class="text-xs text-gray-500 dark:text-gray-400">
            {
              issues.filter((issue: any) => {
                const updatedAt = new Date(issue.updated_at);
                const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
                return updatedAt >= sevenDaysAgo;
              }).length
            } issues updated
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- API Status Warning -->
{
  !activityResult.success && (
    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg
            class="h-5 w-5 text-yellow-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
            />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-yellow-700">
            Unable to fetch recent activity. Please check your
            <a
              href="/api/github/health"
              class="font-medium underline text-yellow-700 hover:text-yellow-600"
            >
              GitHub API connection
            </a>
            .
          </p>
        </div>
      </div>
    </div>
  )
}
