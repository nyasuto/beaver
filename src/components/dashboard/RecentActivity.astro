---
/**
 * Recent Activity Component
 *
 * Displays recent issue activity and commit information
 * Using unified StatsService for consistent data across components
 */

import { formatDistanceToNow } from 'date-fns';
import { ja } from 'date-fns/locale';
import { getStatsService } from '../../lib/services/StatsService';
import { resolveUrl } from '../../lib/utils/url';

// Type for recent issue data from StatsService
type RecentIssue = {
  id: number;
  title: string;
  number: number;
  updated_at: string;
  state: 'open' | 'closed';
  labels?: Array<{ name: string; color: string }>;
  pull_request?: any;
};

// Get unified statistics using the StatsService
const statsService = getStatsService();
const statsResult = await statsService.getUnifiedStats({
  includeRecentActivity: true,
  includePriorityBreakdown: true,
  includeLabels: true,
  recentDays: 7,
  maxRecentItems: 5,
});

// Extract data from unified stats
const stats = statsResult.success ? statsResult.data : null;

// Fetch repository data separately (as it's not part of unified stats)
const fetchRepositoryData = async () => {
  try {
    const response = await fetch(
      `${Astro.site?.origin || 'http://localhost:4321'}/api/github/repository?include_stats=true`
    );

    if (response.ok) {
      const result = await response.json();
      if (result.success) {
        return {
          success: true,
          data: {
            repository: result.data?.repository || null,
            lastPush: result.data?.repository?.pushed_at || null,
          },
        };
      }
    }
  } catch (error) {
    console.error('Failed to fetch repository data:', error);
  }

  return {
    success: false,
    data: {
      repository: null,
      lastPush: null,
    },
  };
};

const repoResult = await fetchRepositoryData();

// Helper function to get issue icon based on state and labels
const getIssueIcon = (issue: RecentIssue) => {
  if (issue.state === 'closed') return '✅';
  if (issue.pull_request) return '🔄';

  // Check for priority labels
  const labels = issue.labels || [];
  const priorityLabel = labels.find(label => label.name && label.name.startsWith('priority:'));

  if (priorityLabel) {
    const priority = priorityLabel.name.split(':')[1]?.trim();
    switch (priority) {
      case 'critical':
        return '🚨';
      case 'high':
        return '🔴';
      case 'medium':
        return '🟡';
      case 'low':
        return '🟢';
      default:
        return '📄';
    }
  }

  return '📄';
};

// Helper function to get relative time in Japanese
const getRelativeTime = (dateString: string) => {
  try {
    return formatDistanceToNow(new Date(dateString), { addSuffix: true, locale: ja });
  } catch {
    return '最近';
  }
};

// Helper function to translate issue state to Japanese
const getIssueStateJa = (state: string) => {
  switch (state) {
    case 'open':
      return 'オープン';
    case 'closed':
      return 'クローズ';
    default:
      return state;
  }
};

// Get recent issues from unified stats
const recentIssues = stats?.recentActivity.recentlyUpdated || [];

// Export interface for type checking
export interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`space-y-6 ${className}`}>
  <!-- Recent Issues Activity -->
  <div class="card">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">最近のIssue</h3>
      <a
        href={resolveUrl('/issues')}
        class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
      >
        すべて表示 →
      </a>
    </div>

    <div class="space-y-3">
      {
        recentIssues.length > 0 ? (
          recentIssues.map((issue: RecentIssue) => (
            <div class="flex items-start space-x-3 p-3 border border-gray-100 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
              <span class="text-lg mt-0.5">{getIssueIcon(issue)}</span>
              <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between">
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-gray-900 dark:text-white truncate">
                      {issue.title}
                    </p>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      #{issue.number} • {getIssueStateJa(issue.state)} •{' '}
                      {getRelativeTime(issue.updated_at)}
                    </p>
                  </div>
                  <div class="flex items-center space-x-1 ml-2">
                    {issue.labels?.slice(0, 1).map(label => (
                      <span
                        class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                        style={`background-color: #${label.color}20; color: #${label.color};`}
                      >
                        {label.name}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div class="text-center py-8 text-gray-500 dark:text-gray-400">
            <span class="text-2xl block mb-2">📭</span>
            <p class="text-sm">最近のIssueが見つかりません</p>
          </div>
        )
      }
    </div>
  </div>
</div>

<!-- Data Source Status -->
{
  stats?.meta.source === 'fallback' && (
    <div class="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
      <p class="text-sm text-yellow-700 dark:text-yellow-300">
        ⚠️ サンプルデータを表示中 -
        <a href="/api/github/health" class="underline hover:no-underline">
          GitHub API接続を確認
        </a>
        して実際のデータを取得してください
      </p>
    </div>
  )
}
{
  (!statsResult.success || !repoResult.success) &&
    stats?.meta.source !== 'fallback' &&
    stats?.meta.source !== 'static_data' && (
      <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
        <p class="text-sm text-blue-700 dark:text-blue-300">
          データが制限されている可能性があります。{' '}
          <a href="/api/github/health" class="underline hover:no-underline">
            APIステータス確認
          </a>
        </p>
      </div>
    )
}
