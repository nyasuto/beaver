---
/**
 * Top Tasks Recommendation Component
 *
 * Displays the top 3 recommended tasks based on issue classification and scoring.
 * This component provides intelligent task prioritization for the dashboard.
 */

import { getIssuesWithFallback } from '../../lib/data/github';
import { getDashboardTasks } from '../../lib/services/TaskRecommendationService';

// Load issues data
const issues = getIssuesWithFallback();

// Get task recommendations
let dashboardTasks;
try {
  dashboardTasks = await getDashboardTasks(issues, 3);
} catch (error) {
  // eslint-disable-next-line no-console
  console.error('Failed to get dashboard tasks:', error);
  dashboardTasks = {
    topTasks: [],
    totalOpenIssues: issues.filter(i => i.state === 'open').length,
    analysisMetrics: {
      averageScore: 0,
      processingTimeMs: 0,
      categoriesFound: [],
      priorityDistribution: {},
    },
    lastUpdated: new Date().toISOString(),
  };
}

const { topTasks, totalOpenIssues, analysisMetrics } = dashboardTasks;

// Helper function to get priority color
function getPriorityColor(priority: string): string {
  if (priority.includes('緊急')) return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
  if (priority.includes('高'))
    return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';
  if (priority.includes('中'))
    return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
  if (priority.includes('低'))
    return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
  return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
}

// Helper function to get effort color
function getEffortColor(effort: string): string {
  if (effort === 'high')
    return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';
  if (effort === 'medium') return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
  return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
}

// Format effort text
function formatEffort(effort: string): string {
  const effortMap: Record<string, string> = {
    low: '軽量',
    medium: '中規模',
    high: '大規模',
  };
  return effortMap[effort] || effort;
}
---

<div class="card">
  <div class="flex items-center justify-between mb-6">
    <div>
      <h2 class="text-lg font-semibold text-heading flex items-center gap-2">
        <span class="text-2xl">🎯</span>
        おすすめタスク
      </h2>
      <p class="text-sm text-muted mt-1">AI分析による優先度の高いタスク上位3件</p>
    </div>
    <div class="text-right">
      <div class="text-sm text-muted">
        オープンIssue: {totalOpenIssues}件
      </div>
      <div class="text-xs text-muted">
        平均スコア: {analysisMetrics.averageScore.toFixed(1)}
      </div>
    </div>
  </div>

  <div class="space-y-4">
    {
      topTasks.length === 0 ? (
        <div class="text-center py-8">
          <div class="text-4xl mb-2">🤔</div>
          <p class="text-muted">現在おすすめできるタスクがありません</p>
          <p class="text-sm text-muted mt-1">
            新しいIssueを作成するか、既存のIssueをご確認ください
          </p>
        </div>
      ) : (
        topTasks.map((task, index) => (
          <div class="border rounded-lg p-4 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-start justify-between mb-3">
              <div class="flex-1">
                <div class="flex items-center gap-2 mb-2">
                  <span class="text-lg font-medium text-blue-600 dark:text-blue-400">
                    #{index + 1}
                  </span>
                  <span
                    class={`px-2 py-1 text-xs rounded-full font-medium ${getPriorityColor(task.priority)}`}
                  >
                    {task.priority}
                  </span>
                  <span class="text-xs text-muted">スコア: {task.score}</span>
                </div>
                <h3 class="font-medium text-heading mb-2">
                  <a
                    href={task.url}
                    class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                  >
                    {task.title}
                  </a>
                </h3>
                {task.description && (
                  <p class="text-sm text-muted mb-3 line-clamp-2">{task.description}</p>
                )}
              </div>
            </div>

            <div class="flex items-center justify-between">
              <div class="flex items-center gap-2 flex-wrap">
                <span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded">
                  {task.category}
                </span>
                <span class={`text-xs px-2 py-1 rounded ${getEffortColor(task.estimatedEffort)}`}>
                  {formatEffort(task.estimatedEffort)}
                </span>
                {task.tags.map(tag => (
                  <span class="text-xs px-2 py-1 bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-200 rounded">
                    {tag}
                  </span>
                ))}
              </div>
              <div class="text-xs text-muted">信頼度: {task.confidence}%</div>
            </div>

            {task.reasons.length > 0 && (
              <div class="mt-3 pt-3 border-t">
                <details class="group">
                  <summary class="text-xs text-muted cursor-pointer hover:text-blue-600 dark:hover:text-blue-400">
                    推奨理由を表示 ▼
                  </summary>
                  <div class="mt-2 space-y-1">
                    {task.reasons.map(reason => (
                      <div class="text-xs text-muted pl-3 border-l-2 border-blue-200 dark:border-blue-800">
                        {reason}
                      </div>
                    ))}
                  </div>
                </details>
              </div>
            )}
          </div>
        ))
      )
    }
  </div>

  {
    topTasks.length > 0 && (
      <div class="mt-6 pt-4 border-t">
        <div class="flex items-center justify-between text-xs text-muted">
          <div class="flex items-center gap-4">
            <span>処理時間: {analysisMetrics.processingTimeMs}ms</span>
            <span>分析対象: {totalOpenIssues}件</span>
          </div>
          <div>最終更新: {new Date(dashboardTasks.lastUpdated).toLocaleString('ja-JP')}</div>
        </div>
        {analysisMetrics.categoriesFound.length > 0 && (
          <div class="mt-2">
            <span class="text-xs text-muted">
              検出カテゴリ: {analysisMetrics.categoriesFound.join(', ')}
            </span>
          </div>
        )}
      </div>
    )
  }
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  details[open] summary {
    color: rgb(59 130 246);
  }

  details summary::marker {
    display: none;
  }

  details summary {
    list-style: none;
  }
</style>
