---
/**
 * Issue Statistics Component
 *
 * Displays the most important issue statistics for quick overview
 * Simplified to show only essential metrics
 */

import StatCard from './StatCard.astro';
import { getStatsService } from '../../lib/services/StatsService';

// Get unified statistics using the StatsService
const statsService = getStatsService();
const statsResult = await statsService.getUnifiedStats({
  includeRecentActivity: true,
  includePriorityBreakdown: true,
  includeLabels: false,
  recentDays: 7,
});

// Extract data from unified stats
const stats = statsResult.success ? statsResult.data : null;

// Calculate derived metrics (preserve -1 for fallback data)
const urgentIssues =
  stats && stats.meta.source !== 'fallback' ? stats.priority.critical + stats.priority.high : -1;
const recentActivity = stats?.recentActivity.thisWeek ?? -1;

// Export interface for type checking
export interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 ${className}`}>
  <!-- オープンなIssue -->
  <StatCard
    title="オープンなIssue"
    value={stats?.open ?? -1}
    icon="🔓"
    description="現在アクティブ"
    color="green"
  />

  <!-- 緊急Issue -->
  <StatCard
    title="緊急Issue"
    value={urgentIssues}
    icon="🚨"
    description="クリティカル・高優先度"
    color="red"
  />

  <!-- 最近の活動 -->
  <StatCard
    title="最近の活動"
    value={recentActivity}
    icon="📈"
    description="今週更新された"
    color="blue"
  />
</div>

<!-- Data Source Status -->
{
  stats?.meta.source === 'fallback' && (
    <div class="mt-4 sm:mt-6 p-3 sm:p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
      <p class="text-sm text-yellow-700 dark:text-yellow-300">
        ⚠️ サンプルデータを表示中 -
        <a href="/api/github/health" class="underline hover:no-underline">
          GitHub API接続を確認
        </a>
        して実際のデータを取得してください
      </p>
    </div>
  )
}
