---
/**
 * Layout component for documentation pages with sidebar navigation
 */

import type { ProcessedDoc, DocNavigation } from '../../lib/types/docs.js';

interface Props {
  doc: ProcessedDoc;
  navigation: DocNavigation[];
}

const { doc, navigation } = Astro.props;
---

<div class="flex min-h-screen bg-white">
  <!-- Sidebar Navigation -->
  <aside
    class="hidden lg:block w-64 bg-gray-50 border-r border-gray-200 fixed h-full overflow-y-auto"
  >
    <div class="p-6">
      <!-- Logo/Header -->
      <div class="mb-8">
        <a href="/docs" class="flex items-center text-xl font-bold text-gray-900">
          ü¶´ Beaver Docs
        </a>
      </div>

      <!-- Search -->
      <div class="mb-6">
        <div id="docs-search-container"></div>
      </div>

      <!-- Navigation Menu -->
      <nav>
        <ul class="space-y-1">
          {
            navigation.map(navItem => (
              <li>
                {navItem.children ? (
                  /* Category with children */
                  <div>
                    <div class="font-medium text-gray-900 px-3 py-2 text-sm">{navItem.title}</div>
                    <ul class="ml-3 space-y-1">
                      {navItem.children.map(child => (
                        <li>
                          <a
                            href={`/docs/${child.slug}`}
                            class={`block px-3 py-1 text-sm rounded-md transition-colors ${
                              doc.slug === child.slug
                                ? 'bg-blue-100 text-blue-700 font-medium'
                                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                            }`}
                          >
                            {child.title}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                ) : (
                  /* Single navigation item */
                  <a
                    href={`/docs/${navItem.slug}`}
                    class={`block px-3 py-2 text-sm rounded-md transition-colors ${
                      doc.slug === navItem.slug
                        ? 'bg-blue-100 text-blue-700 font-medium'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                    }`}
                  >
                    {navItem.title}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>

      <!-- Quick Links -->
      <div class="mt-8 pt-8 border-t border-gray-200">
        <div class="text-sm font-medium text-gray-900 mb-3">„ÇØ„Ç§„ÉÉ„ÇØ„É™„É≥„ÇØ</div>
        <ul class="space-y-1 text-sm">
          <li>
            <a href="/" class="text-gray-600 hover:text-gray-900"> üè† „Éõ„Éº„É† </a>
          </li>
          <li>
            <a href="/issues" class="text-gray-600 hover:text-gray-900"> üìã Issues </a>
          </li>
          <li>
            <a href="/quality" class="text-gray-600 hover:text-gray-900"> üìä ÂìÅË≥™„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ </a>
          </li>
          <li>
            <a
              href="https://github.com/nyasuto/beaver"
              target="_blank"
              rel="noopener noreferrer"
              class="text-gray-600 hover:text-gray-900"
            >
              üîó GitHub
            </a>
          </li>
        </ul>
      </div>
    </div>
  </aside>

  <!-- Mobile Menu Button -->
  <div class="lg:hidden fixed top-4 left-4 z-50">
    <button
      id="mobile-menu-button"
      class="p-2 bg-white border border-gray-300 rounded-md shadow-sm"
      aria-label="„É°„Éã„É•„Éº„ÇíÈñã„Åè"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>
  </div>

  <!-- Mobile Navigation Overlay -->
  <div id="mobile-nav-overlay" class="lg:hidden fixed inset-0 z-40 bg-black bg-opacity-50 hidden">
    <aside class="w-64 bg-white h-full shadow-lg overflow-y-auto">
      <div class="p-6">
        <div class="flex items-center justify-between mb-8">
          <a href="/docs" class="flex items-center text-xl font-bold text-gray-900">
            ü¶´ Beaver Docs
          </a>
          <button
            id="mobile-menu-close"
            class="p-1 text-gray-400 hover:text-gray-600"
            aria-label="„É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Mobile Search -->
        <div class="mb-6">
          <div id="mobile-docs-search-container"></div>
        </div>

        <!-- Same navigation as desktop -->
        <nav>
          <ul class="space-y-1">
            {
              navigation.map(navItem => (
                <li>
                  {navItem.children ? (
                    <div>
                      <div class="font-medium text-gray-900 px-3 py-2 text-sm">{navItem.title}</div>
                      <ul class="ml-3 space-y-1">
                        {navItem.children.map(child => (
                          <li>
                            <a
                              href={`/docs/${child.slug}`}
                              class={`block px-3 py-1 text-sm rounded-md transition-colors ${
                                doc.slug === child.slug
                                  ? 'bg-blue-100 text-blue-700 font-medium'
                                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                              }`}
                            >
                              {child.title}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  ) : (
                    <a
                      href={`/docs/${navItem.slug}`}
                      class={`block px-3 py-2 text-sm rounded-md transition-colors ${
                        doc.slug === navItem.slug
                          ? 'bg-blue-100 text-blue-700 font-medium'
                          : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                      }`}
                    >
                      {navItem.title}
                    </a>
                  )}
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </aside>
  </div>

  <!-- Main Content -->
  <main class="flex-1 lg:ml-64">
    <div class="max-w-4xl mx-auto px-6 lg:px-8 py-8 lg:py-12">
      <slot />
    </div>
  </main>
</div>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.getElementById('mobile-menu-button');
    const closeButton = document.getElementById('mobile-menu-close');
    const overlay = document.getElementById('mobile-nav-overlay');

    const openMenu = () => {
      overlay?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    };

    const closeMenu = () => {
      overlay?.classList.add('hidden');
      document.body.style.overflow = '';
    };

    menuButton?.addEventListener('click', openMenu);
    closeButton?.addEventListener('click', closeMenu);

    // Close menu when clicking on overlay
    overlay?.addEventListener('click', e => {
      if (e.target === overlay) {
        closeMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape') {
        closeMenu();
      }
    });
  });

  // Initialize search components
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Dynamic import of React and DocsSearch component
      const { createElement } = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: DocsSearch } = await import('./DocsSearch.tsx');

      // Initialize desktop search
      const desktopContainer = document.getElementById('docs-search-container');
      if (desktopContainer) {
        const root = createRoot(desktopContainer);
        root.render(createElement(DocsSearch));
      }

      // Initialize mobile search
      const mobileContainer = document.getElementById('mobile-docs-search-container');
      if (mobileContainer) {
        const root = createRoot(mobileContainer);
        root.render(createElement(DocsSearch));
      }
    } catch (error) {
      console.warn('Failed to initialize search:', error);

      // Fallback: simple search input
      const fallbackHTML = `
        <input 
          type="text" 
          placeholder="„Éâ„Ç≠„É•„É°„É≥„ÉàÊ§úÁ¥¢ÔºàËøëÊó•ÂÖ¨ÈñãÔºâ"
          class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md bg-gray-50"
          disabled
        />
      `;

      document
        .getElementById('docs-search-container')
        ?.insertAdjacentHTML('beforeend', fallbackHTML);
      document
        .getElementById('mobile-docs-search-container')
        ?.insertAdjacentHTML('beforeend', fallbackHTML);
    }
  });
</script>
