---
/**
 * Header Navigation Component
 *
 * Main navigation header for the Beaver Astro application.
 * Includes logo, navigation links, theme toggle, and mobile menu.
 */

import { resolveUrl } from '../../lib/utils/url';
import ThemeToggle from '../ui/ThemeToggle.astro';

export interface Props {
  currentPath?: string;
  showSearch?: boolean;
  fixed?: boolean;
  transparent?: boolean;
  class?: string;
}

const {
  currentPath = Astro.url.pathname,
  showSearch = false,
  fixed = false,
  transparent = false,
  class: className = '',
} = Astro.props;

// Navigation items with priority levels
const navItems = [
  { name: 'ホーム', href: resolveUrl('/'), icon: 'home', priority: 'primary' },
  { name: 'Issue', href: resolveUrl('/issues'), icon: 'bug', priority: 'primary' },
  { name: 'ドキュメント', href: resolveUrl('/docs'), icon: 'docs', priority: 'primary' },
  { name: '品質分析', href: resolveUrl('/quality'), icon: 'quality', priority: 'secondary' },
  {
    name: 'ビーバーの事実',
    href: resolveUrl('/beaver-facts'),
    icon: 'info',
    priority: 'secondary',
  },
];

// Separate primary and secondary navigation
const primaryNavItems = navItems.filter(item => item.priority === 'primary');
const secondaryNavItems = navItems.filter(item => item.priority === 'secondary');

// Check if current path matches nav item
const isActive = (href: string) => {
  if (href === '/') return currentPath === '/';
  return currentPath.startsWith(href);
};

// Header classes
const headerClasses = [
  'bg-white dark:bg-gray-900',
  'border-b border-gray-200 dark:border-gray-700',
  fixed && 'fixed top-0 left-0 right-0 z-50',
  transparent && 'bg-transparent border-transparent backdrop-blur-sm',
  'transition-all duration-200',
  className,
]
  .filter(Boolean)
  .join(' ');
---

<header class={headerClasses}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Logo and brand -->
      <div class="flex items-center">
        <a href={resolveUrl('/')} class="flex items-center space-x-2 group">
          <div
            class="w-8 h-8 bg-white dark:bg-gray-100 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform duration-200 p-1 shadow-sm"
          >
            <img src={resolveUrl('/favicon.png')} alt="Beaver" class="w-6 h-6 object-contain" />
          </div>
          <span
            class="text-xl font-bold text-heading group-hover:text-primary-600 transition-colors"
          >
            Beaver
          </span>
        </a>
      </div>

      <!-- Desktop navigation with hierarchical structure -->
      <nav class="hidden md:flex items-center space-x-1">
        <!-- Primary Navigation -->
        <div class="flex items-center space-x-1 mr-4">
          {
            primaryNavItems.map(item => (
              <a
                href={item.href}
                class={`px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 ${
                  isActive(item.href)
                    ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-300'
                    : 'text-gray-900 hover:text-primary-600 hover:bg-gray-100 dark:text-gray-100 dark:hover:text-primary-400 dark:hover:bg-gray-800'
                }`}
                aria-current={isActive(item.href) ? 'page' : undefined}
              >
                <span class="flex items-center space-x-2">
                  {item.icon === 'home' && (
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                      />
                    </svg>
                  )}
                  {item.icon === 'bug' && (
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  )}
                  {item.icon === 'docs' && (
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                      />
                    </svg>
                  )}
                  {item.icon === 'chart' && (
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                      />
                    </svg>
                  )}
                  <span>{item.name}</span>
                </span>
              </a>
            ))
          }
        </div>

        <!-- Secondary Navigation -->
        {
          secondaryNavItems.length > 0 && (
            <div class="flex items-center space-x-1 border-l border-gray-200 dark:border-gray-700 pl-4">
              {secondaryNavItems.map(item => (
                <a
                  href={item.href}
                  class={`px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-secondary-500 focus:ring-offset-2 ${
                    isActive(item.href)
                      ? 'bg-secondary-100 text-secondary-700 dark:bg-secondary-900 dark:text-secondary-300'
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:bg-gray-800'
                  }`}
                  aria-current={isActive(item.href) ? 'page' : undefined}
                >
                  <span class="flex items-center space-x-2">
                    {item.icon === 'chart' && (
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                        />
                      </svg>
                    )}
                    {item.icon === 'quality' && (
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    )}
                    {item.icon === 'info' && (
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    )}
                    <span>{item.name}</span>
                  </span>
                </a>
              ))}
            </div>
          )
        }
      </nav>

      <!-- Search bar (if enabled) -->
      {
        showSearch && (
          <div class="hidden md:flex items-center flex-1 max-w-md mx-4">
            <div class="relative w-full">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg
                  class="w-5 h-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <input
                type="search"
                placeholder="Issueを検索..."
                class="input pl-10 pr-4 py-2 w-full"
                id="search-input"
              />
            </div>
          </div>
        )
      }

      <!-- Right side actions -->
      <div class="flex items-center space-x-2">
        <!-- Settings button -->
        <button
          id="settings-toggle"
          class="p-2 rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 focus-visible"
          aria-label="設定を開く"
          title="設定"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
            ></path>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
        </button>

        <!-- Theme toggle -->
        <ThemeToggle size="md" class="hidden sm:flex" />
        <ThemeToggle size="sm" class="sm:hidden" />

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-toggle"
          class="md:hidden p-2 rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 focus-visible"
          aria-label="モバイルメニュー切り替え"
          aria-expanded="false"
        >
          <svg
            id="mobile-menu-icon-open"
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
          <svg
            id="mobile-menu-icon-close"
            class="w-6 h-6 hidden"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu with hierarchical structure -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-gray-200 dark:border-gray-700">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
        <!-- Primary Navigation -->
        <div class="space-y-1 mb-3">
          <div class="px-3 py-1 text-xs font-semibold text-gray-400 uppercase tracking-wider">
            メインナビゲーション
          </div>
          {
            primaryNavItems.map(item => (
              <a
                href={item.href}
                class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
                  isActive(item.href)
                    ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-300'
                    : 'text-gray-900 hover:text-primary-600 hover:bg-gray-100 dark:text-gray-100 dark:hover:text-primary-400 dark:hover:bg-gray-800'
                }`}
                aria-current={isActive(item.href) ? 'page' : undefined}
              >
                <span class="flex items-center space-x-2">
                  {item.icon === 'home' && (
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                      />
                    </svg>
                  )}
                  {item.icon === 'bug' && (
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  )}
                  {item.icon === 'docs' && (
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                      />
                    </svg>
                  )}
                  <span>{item.name}</span>
                </span>
              </a>
            ))
          }
        </div>

        <!-- Secondary Navigation -->
        {
          secondaryNavItems.length > 0 && (
            <div class="space-y-1 border-t border-gray-200 dark:border-gray-700 pt-3">
              <div class="px-3 py-1 text-xs font-semibold text-gray-400 uppercase tracking-wider">
                追加機能
              </div>
              {secondaryNavItems.map(item => (
                <a
                  href={item.href}
                  class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
                    isActive(item.href)
                      ? 'bg-secondary-100 text-secondary-700 dark:bg-secondary-900 dark:text-secondary-300'
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:bg-gray-800'
                  }`}
                  aria-current={isActive(item.href) ? 'page' : undefined}
                >
                  <span class="flex items-center space-x-2">
                    {item.icon === 'chart' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                        />
                      </svg>
                    )}
                    {item.icon === 'quality' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    )}
                    {item.icon === 'info' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    )}
                    <span>{item.name}</span>
                  </span>
                </a>
              ))}
            </div>
          )
        }

        {
          showSearch && (
            <div class="px-3 py-2">
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg
                    class="w-5 h-5 text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                </div>
                <input
                  type="search"
                  placeholder="Issueを検索..."
                  class="input pl-10 pr-4 py-2 w-full"
                  id="mobile-search-input"
                />
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>
</header>

<script>
  // Header functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const settingsToggle = document.getElementById('settings-toggle');

    // Mobile menu toggle
    if (mobileMenuToggle && mobileMenu) {
      const openIcon = document.getElementById('mobile-menu-icon-open');
      const closeIcon = document.getElementById('mobile-menu-icon-close');

      mobileMenuToggle.addEventListener('click', () => {
        const isOpen = !mobileMenu.classList.contains('hidden');

        if (isOpen) {
          mobileMenu.classList.add('hidden');
          mobileMenuToggle.setAttribute('aria-expanded', 'false');
          if (openIcon) openIcon.classList.remove('hidden');
          if (closeIcon) closeIcon.classList.add('hidden');
        } else {
          mobileMenu.classList.remove('hidden');
          mobileMenuToggle.setAttribute('aria-expanded', 'true');
          if (openIcon) openIcon.classList.add('hidden');
          if (closeIcon) closeIcon.classList.remove('hidden');
        }
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', e => {
        if (
          !mobileMenuToggle.contains(e.target as Node) &&
          !mobileMenu.contains(e.target as Node)
        ) {
          mobileMenu.classList.add('hidden');
          mobileMenuToggle.setAttribute('aria-expanded', 'false');
          if (openIcon) openIcon.classList.remove('hidden');
          if (closeIcon) closeIcon.classList.add('hidden');
        }
      });
    }

    // Settings toggle functionality
    if (settingsToggle) {
      settingsToggle.addEventListener('click', () => {
        // Try to open settings using the global function
        if (typeof (window as any).openSettings === 'function') {
          (window as any).openSettings();
        } else {
          // Fallback: dispatch a custom event
          document.dispatchEvent(new CustomEvent('settings:open'));
        }
      });
    }

    // Listen for settings:open events to show settings panel
    document.addEventListener('settings:open', () => {
      // Try to open settings via global function
      if (typeof (window as any).openSettings === 'function') {
        (window as any).openSettings();
      } else {
        console.warn('Settings system not available');
      }
    });
  });
</script>
