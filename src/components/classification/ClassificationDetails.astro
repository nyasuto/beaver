---
/**
 * ClassificationDetails Component
 *
 * Displays comprehensive classification information including categories,
 * confidence levels, reasoning, and metadata
 */
import ConfidenceIndicator from './ConfidenceIndicator.astro';
import type { EnhancedIssueClassification } from '../../lib/schemas/enhanced-classification';

export interface Props {
  classification: EnhancedIssueClassification;
  variant?: 'default' | 'compact' | 'detailed';
  showMetadata?: boolean;
  showReasons?: boolean;
  showKeywords?: boolean;
  maxReasons?: number;
  className?: string;
}

const {
  classification,
  variant = 'default',
  showMetadata = true,
  showReasons = true,
  showKeywords = true,
  maxReasons = 3,
  className = '',
} = Astro.props;

// Format category for display
const formatCategory = (category: string): string => {
  const categoryMap: Record<string, string> = {
    bug: 'üêõ „Éê„Ç∞',
    security: 'üîí „Çª„Ç≠„É•„É™„ÉÜ„Ç£',
    feature: '‚ú® Êñ∞Ê©üËÉΩ',
    enhancement: '‚ö° ÊîπÂñÑ',
    performance: 'üöÄ „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ',
    documentation: 'üìö „Éâ„Ç≠„É•„É°„É≥„Éà',
    question: '‚ùì Ë≥™Âïè',
    test: 'üß™ „ÉÜ„Çπ„Éà',
    refactor: 'üîß „É™„Éï„Ç°„ÇØ„Çø',
    'ci-cd': '‚öôÔ∏è CI/CD',
    dependencies: 'üì¶ ‰æùÂ≠òÈñ¢‰øÇ',
    'good-first-issue': 'üå± ÂàùÂøÉËÄÖÂêë„Åë',
  };
  return categoryMap[category] || `üìã ${category}`;
};

// Format priority for display
const formatPriority = (priority: string): string => {
  const priorityMap: Record<string, string> = {
    critical: 'üî¥ Á∑äÊÄ•',
    high: 'üü† È´ò',
    medium: 'üü° ‰∏≠',
    low: 'üü¢ ‰Ωé',
    backlog: '‚ö™ „Éê„ÉÉ„ÇØ„É≠„Ç∞',
  };
  return priorityMap[priority] || `üü° ${priority}`;
};

// Get top classifications for display
const topClassifications = classification.classifications.slice(0, maxReasons);

// Calculate processing time display
const getProcessingTimeText = (timeMs: number): string => {
  if (timeMs < 1000) return `${timeMs}ms`;
  if (timeMs < 60000) return `${(timeMs / 1000).toFixed(1)}s`;
  return `${(timeMs / 60000).toFixed(1)}m`;
};

const processingTimeText = getProcessingTimeText(classification.processingTimeMs);
---

<div
  class={`classification-details classification-details--${variant} ${className}`}
  aria-label="ÂàÜÈ°ûË©≥Á¥∞ÊÉÖÂ†±"
>
  {/* Primary Classification */}
  <div class="classification-details__primary">
    <div class="classification-details__primary-header">
      <h3 class="classification-details__title">
        {variant === 'compact' ? 'ÂàÜÈ°û' : 'ÂàÜÈ°ûÁµêÊûú'}
      </h3>
      {
        classification.cacheHit && (
          <span class="classification-details__cache-badge">üíæ „Ç≠„É£„ÉÉ„Ç∑„É•</span>
        )
      }
    </div>

    <div class="classification-details__primary-content">
      <div class="classification-details__category">
        <span class="classification-details__category-label">
          {formatCategory(classification.primaryCategory)}
        </span>
        <ConfidenceIndicator
          confidence={classification.primaryConfidence}
          size={variant === 'compact' ? 'small' : 'medium'}
          variant="compact"
          showLabel={false}
        />
      </div>

      <div class="classification-details__priority">
        <span class="classification-details__priority-label">
          {formatPriority(classification.estimatedPriority)}
        </span>
        <ConfidenceIndicator
          confidence={classification.priorityConfidence}
          size={variant === 'compact' ? 'small' : 'medium'}
          variant="compact"
          showLabel={false}
        />
      </div>
    </div>
  </div>

  {/* Score Information */}
  {
    variant !== 'compact' && (
      <div class="classification-details__score">
        <div class="classification-details__score-main">
          <span class="classification-details__score-value">{classification.score}</span>
          <span class="classification-details__score-label">„Çπ„Ç≥„Ç¢</span>
        </div>

        <div class="classification-details__score-breakdown">
          <div class="classification-details__score-item">
            <span class="classification-details__score-item-label">„Ç´„ÉÜ„Ç¥„É™</span>
            <span class="classification-details__score-item-value">
              {classification.scoreBreakdown.category}
            </span>
          </div>
          <div class="classification-details__score-item">
            <span class="classification-details__score-item-label">ÂÑ™ÂÖàÂ∫¶</span>
            <span class="classification-details__score-item-value">
              {classification.scoreBreakdown.priority}
            </span>
          </div>
          <div class="classification-details__score-item">
            <span class="classification-details__score-item-label">‰ø°È†ºÂ∫¶</span>
            <span class="classification-details__score-item-value">
              {classification.scoreBreakdown.confidence}
            </span>
          </div>
          <div class="classification-details__score-item">
            <span class="classification-details__score-item-label">ÊúÄÊñ∞ÊÄß</span>
            <span class="classification-details__score-item-value">
              {classification.scoreBreakdown.recency}
            </span>
          </div>
        </div>
      </div>
    )
  }

  {/* Classification Rules */}
  {
    showReasons && topClassifications.length > 0 && (
      <div class="classification-details__rules">
        <h4 class="classification-details__rules-title">
          {variant === 'compact' ? 'ÁêÜÁî±' : 'ÈÅ©Áî®„Åï„Çå„Åü„É´„Éº„É´'}
        </h4>
        <div class="classification-details__rules-list">
          {topClassifications.map((rule, index) => (
            <div class="classification-details__rule">
              <div class="classification-details__rule-header">
                <span class="classification-details__rule-name">
                  {rule.ruleName || `„É´„Éº„É´ ${index + 1}`}
                </span>
                <ConfidenceIndicator
                  confidence={rule.confidence}
                  size="small"
                  variant="compact"
                  showLabel={false}
                />
              </div>

              {variant === 'detailed' && rule.reasons && (
                <div class="classification-details__rule-reasons">
                  {rule.reasons.slice(0, 2).map((reason, _reasonIndex) => (
                    <span class="classification-details__reason">‚Ä¢ {reason}</span>
                  ))}
                </div>
              )}

              {showKeywords && rule.keywords && rule.keywords.length > 0 && (
                <div class="classification-details__rule-keywords">
                  {rule.keywords.slice(0, 3).map((keyword, _keywordIndex) => (
                    <span class="classification-details__keyword">{keyword}</span>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    )
  }

  {/* Metadata */}
  {
    showMetadata && variant !== 'compact' && (
      <div class="classification-details__metadata">
        <div class="classification-details__metadata-grid">
          <div class="classification-details__metadata-item">
            <span class="classification-details__metadata-label">Âá¶ÁêÜÊôÇÈñì</span>
            <span class="classification-details__metadata-value">{processingTimeText}</span>
          </div>

          <div class="classification-details__metadata-item">
            <span class="classification-details__metadata-label">„Ç¢„É´„Ç¥„É™„Ç∫„É†</span>
            <span class="classification-details__metadata-value">
              v{classification.algorithmVersion}
            </span>
          </div>

          <div class="classification-details__metadata-item">
            <span class="classification-details__metadata-label">Ë®≠ÂÆö</span>
            <span class="classification-details__metadata-value">
              v{classification.configVersion}
            </span>
          </div>

          {classification.profileId && (
            <div class="classification-details__metadata-item">
              <span class="classification-details__metadata-label">„Éó„É≠„Éï„Ç°„Ç§„É´</span>
              <span class="classification-details__metadata-value">{classification.profileId}</span>
            </div>
          )}
        </div>
      </div>
    )
  }
</div>

<style>
  .classification-details {
    --color-bg: #ffffff;
    --color-border: #e5e7eb;
    --color-primary: #3b82f6;
    --color-success: #10b981;
    --color-warning: #f59e0b;
    --color-error: #ef4444;

    display: flex;
    flex-direction: column;
    gap: 1rem;
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1rem;
    font-family: var(--font-sans);
  }

  .classification-details--compact {
    padding: 0.75rem;
    gap: 0.75rem;
  }

  .classification-details--detailed {
    padding: 1.5rem;
    gap: 1.5rem;
  }

  .classification-details__primary-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .classification-details__title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--color-text);
    margin: 0;
  }

  .classification-details--compact .classification-details__title {
    font-size: 1rem;
  }

  .classification-details__cache-badge {
    background-color: var(--color-success);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .classification-details__primary-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .classification-details__category,
  .classification-details__priority {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background-color: var(--color-bg-secondary);
    border-radius: 0.375rem;
  }

  .classification-details__category-label,
  .classification-details__priority-label {
    font-weight: 500;
    color: var(--color-text);
  }

  .classification-details__score {
    display: flex;
    gap: 1rem;
    align-items: center;
    padding: 1rem;
    background-color: var(--color-bg-secondary);
    border-radius: 0.375rem;
  }

  .classification-details__score-main {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 4rem;
  }

  .classification-details__score-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
  }

  .classification-details__score-label {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }

  .classification-details__score-breakdown {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(4rem, 1fr));
    gap: 0.5rem;
    flex: 1;
  }

  .classification-details__score-item {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .classification-details__score-item-label {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    margin-bottom: 0.25rem;
  }

  .classification-details__score-item-value {
    font-weight: 600;
    color: var(--color-text);
  }

  .classification-details__rules-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-text);
    margin: 0 0 0.75rem 0;
  }

  .classification-details__rules-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .classification-details__rule {
    padding: 0.75rem;
    background-color: var(--color-bg-secondary);
    border-radius: 0.375rem;
    border-left: 3px solid var(--color-primary);
  }

  .classification-details__rule-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .classification-details__rule-name {
    font-weight: 500;
    color: var(--color-text);
  }

  .classification-details__rule-reasons {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    margin-bottom: 0.5rem;
  }

  .classification-details__reason {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }

  .classification-details__rule-keywords {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .classification-details__keyword {
    background-color: var(--color-primary);
    color: white;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .classification-details__metadata {
    padding: 0.75rem;
    background-color: var(--color-bg-secondary);
    border-radius: 0.375rem;
  }

  .classification-details__metadata-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(8rem, 1fr));
    gap: 0.75rem;
  }

  .classification-details__metadata-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .classification-details__metadata-label {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  .classification-details__metadata-value {
    font-weight: 500;
    color: var(--color-text);
  }

  /* Dark mode support */
  :global(.dark) .classification-details {
    --color-bg: #1f2937;
    --color-border: #374151;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .classification-details {
      padding: 0.75rem;
    }

    .classification-details__score {
      flex-direction: column;
      gap: 0.75rem;
    }

    .classification-details__score-breakdown {
      grid-template-columns: repeat(2, 1fr);
    }

    .classification-details__metadata-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 480px) {
    .classification-details__primary-content {
      gap: 0.5rem;
    }

    .classification-details__metadata-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
