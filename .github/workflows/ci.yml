name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run quality checks
        run: make quality
        
      - name: Build project
        run: make build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Run dependency check
        run: npm ls --depth=0

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run Astro check
        run: npx astro check

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Check code formatting
        run: npm run format:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test
        continue-on-error: true  # Tests may not exist yet
        
      - name: Generate test coverage
        run: npm run test:coverage
        continue-on-error: true  # Tests may not exist yet
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality-check, security-scan, type-check, lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for preview
        run: npm run build
        
      - name: Deploy to GitHub Pages (Preview)
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'pull_request'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          destination_dir: pr-${{ github.event.number }}
          
      - name: Comment PR with preview link
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview deployment ready!**
              
              üì± Preview URL: https://${context.repo.owner}.github.io/${context.repo.repo}/pr-${{ github.event.number }}/
              
              This preview will be updated automatically when you push new commits to this PR.`
            })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-check, security-scan, type-check, lint-and-format, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          
      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              description: 'Production deployment',
              required_contexts: []
            })

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
      - name: Notify deployment success
        if: needs.deploy-production.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'beaver-deployments'
          SLACK_COLOR: good
          SLACK_MESSAGE: 'üöÄ Beaver Astro successfully deployed to production!'
          SLACK_TITLE: 'Deployment Success'
          SLACK_USERNAME: 'GitHub Actions'
          
      - name: Notify deployment failure
        if: needs.deploy-production.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'beaver-deployments'
          SLACK_COLOR: danger
          SLACK_MESSAGE: '‚ùå Beaver Astro deployment failed!'
          SLACK_TITLE: 'Deployment Failed'
          SLACK_USERNAME: 'GitHub Actions'